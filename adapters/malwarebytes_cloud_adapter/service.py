import datetime
import logging

from axonius.adapter_base import AdapterBase, AdapterProperty
from axonius.adapter_exceptions import ClientConnectionException
from axonius.clients.rest.connection import RESTConnection
from axonius.clients.rest.connection import RESTException
from axonius.devices.device_adapter import DeviceAdapter, AGENT_NAMES
from axonius.utils.files import get_local_config_file
from axonius.fields import Field, ListField
from axonius.smart_json_class import SmartJsonClass
from axonius.utils.parsing import is_domain_valid
from axonius.utils.datetime import parse_date
from malwarebytes_cloud_adapter.connection import MalwarebytesCloudConnection
from malwarebytes_cloud_adapter.client_id import get_client_id
from malwarebytes_cloud_adapter.consts import DEFAULT_DOMAIN

logger = logging.getLogger(f'axonius.{__name__}')


class MalwareBytesPlugin(SmartJsonClass):
    plugin_name = Field(str, 'Plugin Name')
    plugin_version = Field(str, 'Plugin Version')


class MalwarebytesCloudAdapter(AdapterBase):
    # pylint: disable=too-many-instance-attributes
    class MyDeviceAdapter(DeviceAdapter):
        machine_id = Field(str, 'Machine ID')
        account_id = Field(str, 'Account ID')
        at = Field(str, 'At')
        group_id = Field(str, 'Group ID')
        engine_version = Field(str, 'Engine Version')
        policy_etag = Field(str, 'Policy Etag')
        online = Field(bool, 'Online')
        group_name = Field(str, 'Group Name')
        policy_name = Field(str, 'Policy Name')
        policy_id = Field(str, 'Policy ID')
        isolated = Field(bool, 'Isolated')
        machine_version = Field(str, 'Machine Version')
        last_scanned_at = Field(datetime.datetime, 'Last Scanned At')
        is_deleted = Field(bool, 'Is Deleted')
        scan_age_days = Field(int, 'Scan Age Days')
        suspicious_activity_count = Field(int, 'Suspicious Activity Count')
        infection_count = Field(int, 'Infection Count')
        reboot_required = Field(int, 'Reboot Required')
        malwarebytes_plugins = ListField(MalwareBytesPlugin, 'Malwarebytes Plugins')

    def __init__(self, *args, **kwargs):
        super().__init__(config_file_path=get_local_config_file(__file__), *args, **kwargs)

    @staticmethod
    def _get_client_id(client_config):
        return get_client_id(client_config)

    @staticmethod
    def _test_reachability(client_config):
        return RESTConnection.test_reachability(client_config.get('domain'),
                                                https_proxy=client_config.get('https_proxy'))

    @staticmethod
    def get_connection(client_config):
        connection = MalwarebytesCloudConnection(domain=client_config['domain'],
                                                 verify_ssl=client_config['verify_ssl'],
                                                 https_proxy=client_config.get('https_proxy'),
                                                 client_id=client_config['client_id'],
                                                 client_secret=client_config['client_secret'],
                                                 account_id=client_config['account_id'])
        with connection:
            pass
        return connection

    def _connect_client(self, client_config):
        try:
            return self.get_connection(client_config)
        except RESTException as e:
            message = 'Error connecting to client with domain {0}, reason: {1}'.format(
                client_config['domain'], str(e))
            logger.exception(message)
            raise ClientConnectionException(message)

    @staticmethod
    def _query_devices_by_client(client_name, client_data):
        """
        Get all devices from a specific  domain

        :param str client_name: The name of the client
        :param obj client_data: The data that represent a connection

        :return: A json with all the attributes returned from the Server
        """
        with client_data:
            yield from client_data.get_device_list()

    @staticmethod
    def _clients_schema():
        """
        The schema MalwarebytesCloudAdapter expects from configs

        :return: JSON scheme
        """
        return {
            'items': [
                {
                    'name': 'domain',
                    'title': 'Malwarebytes Endpoint Protection',
                    'type': 'string',
                    'default': DEFAULT_DOMAIN
                },
                {
                    'name': 'account_id',
                    'title': 'Account ID',
                    'type': 'string'
                },
                {
                    'name': 'client_id',
                    'title': 'Client ID',
                    'type': 'string'
                },
                {
                    'name': 'client_secret',
                    'title': 'Client Secret',
                    'type': 'string',
                    'format': 'password'
                },
                {
                    'name': 'verify_ssl',
                    'title': 'Verify SSL',
                    'type': 'bool'
                },
                {
                    'name': 'https_proxy',
                    'title': 'HTTPS Proxy',
                    'type': 'string'
                }
            ],
            'required': [
                'domain',
                'client_id',
                'account_id',
                'client_secret',
                'verify_ssl'
            ],
            'type': 'array'
        }

    # pylint: disable=too-many-branches, too-many-statements, too-many-locals, too-many-nested-blocks
    @staticmethod
    def _create_device(device_raw, device: MyDeviceAdapter):
        try:
            agent_raw = device_raw.get('agent')
            machine_raw = device_raw.get('machine')
            machine_id = agent_raw.get('machine_id') or machine_raw.get('id')
            if not machine_id:
                logger.warning(f'Bad device with no ID {device_raw}')
                return None
            device.machine_id = machine_id
            device.id = machine_id
            device.account_id = agent_raw.get('account_id')
            device.at = agent_raw.get('at')
            device.group_id = agent_raw.get('group_id')
            nics_raw = agent_raw.get('nics')
            if not isinstance(nics_raw, list):
                nics_raw = []
            for nic_raw in nics_raw:
                try:
                    device.add_nic(mac=nic_raw.get('mac_address'),
                                   ips=nic_raw.get('ips'),
                                   name=nic_raw.get('description'))
                except Exception:
                    logger.exception(f'problem adding nic {nic_raw}')
            os_info = agent_raw.get('os_info')
            if not isinstance(os_info, dict):
                os_info = {}
            device.figure_os((os_info.get('os_type') or '') + ' ' + (os_info.get('os_version') or '') + ' ' +
                             (os_info.get('os_platform') or '') + ' ' + (os_info.get('os_architecture') or ''))
            device.domain = agent_raw.get('domain_name') if is_domain_valid(agent_raw.get('domain_name')) else None
            device.hostname = agent_raw.get('host_name')
            device.add_agent_version(agent=AGENT_NAMES.malwarebytes_cloud,
                                     version=agent_raw.get('engine_version'))
            device.engine_version = agent_raw.get('engine_version')
            device.policy_etag = agent_raw.get('policy_etag')
            device.online = machine_raw.get('online') if isinstance(machine_raw.get('online'), bool) else None
            device.group_name = machine_raw.get('group_name')
            device.policy_name = machine_raw.get('policy_name')
            device.policy_id = machine_raw.get('policy_id')
            device.last_seen = parse_date(machine_raw.get('last_day_seen'))
            device.isolated = machine_raw.get('isolated') if isinstance(machine_raw.get('isolated'), bool) else None
            device.machine_version = device_raw.get('machineVersion')
            device.last_scanned_at = parse_date(machine_raw.get('last_scanned_at'))
            device.is_deleted = machine_raw.get('is_deleted')\
                if isinstance(machine_raw.get('is_deleted'), bool) else None
            device.scan_age_days = machine_raw.get('scan_age_days')\
                if isinstance(machine_raw.get('scan_age_days'), int) else None
            device.suspicious_activity_count = machine_raw.get('suspicious_activity_count')\
                if isinstance(machine_raw.get('suspicious_activity_count'), int) else None
            device.infection_count = machine_raw.get('infection_count')\
                if isinstance(machine_raw.get('infection_count'), int) else None
            device.reboot_required = machine_raw.get('reboot_required')\
                if isinstance(machine_raw.get('reboot_required'), int) else None
            plugins_raw = agent_raw.get('plugins')
            if not isinstance(plugins_raw, dict):
                plugins_raw = {}
            for plugin_raw in plugins_raw.values():
                try:
                    malwarebytes_plugin = MalwareBytesPlugin(plugin_name=plugin_raw.get('product_name'),
                                                             plugin_version=plugin_raw.get('plugin_version'))
                    device.malwarebytes_plugins.append(malwarebytes_plugin)
                except Exception:
                    logger.exception(f'Problem with plugin raw {plugin_raw}')
            device.set_raw(device_raw)
            return device
        except Exception:
            logger.exception(f'Problem with fetching MalwarebytesCloud Device for {device_raw}')
            return None

    def _parse_raw_data(self, devices_raw_data):
        for device_raw in devices_raw_data:
            device = self._create_device(device_raw=device_raw, device=self._new_device_adapter())
            if device:
                yield device

    @classmethod
    def adapter_properties(cls):
        return [AdapterProperty.Agent, AdapterProperty.Endpoint_Protection_Platform]
