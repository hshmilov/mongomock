import datetime
import logging

from axonius.clients.rest.connection import RESTConnection
from axonius.clients.rest.exception import RESTException
from malwarebytes_cloud_adapter.consts import DEVICE_PER_PAGE, MAX_NUMBER_OF_DEVICES

logger = logging.getLogger(f'axonius.{__name__}')


class MalwarebytesCloudConnection(RESTConnection):
    """ rest client for MalwarebytesCloud adapter """

    def __init__(self, *args, account_id, client_id, client_secret, **kwargs):
        super().__init__(*args, url_base_prefix='/',
                         headers={'Accept': 'application/json',
                                  'Content-Type': 'application/json'},
                         **kwargs)
        self._username = client_id
        self._password = client_secret
        self._account_id = account_id
        self._last_refresh = None
        self._expires_in = None

    def _refresh_token(self, scope):
        if self._last_refresh and self._expires_in \
                and self._last_refresh + datetime.timedelta(seconds=self._expires_in) > datetime.datetime.now():
            return
        response = self._post('oauth2/token',
                              extra_headers={'Content-Type': 'application/x-www-form-urlencoded'},
                              body_params=f'grant_type=client_credentials&scope={scope}',
                              use_json_in_body=False,
                              do_basic_auth=True)
        if 'access_token' not in response:
            raise RESTException(f'Bad response: {response}')
        self._token = response['access_token']
        self._session_headers['Authorization'] = f'Bearer {self._token}'
        self._session_headers['x-mwb-accountid'] = self._account_id
        self._last_refresh = datetime.datetime.now()
        self._expires_in = int(response['expires_in'])

    def _connect(self):
        if not self._username or not self._password:
            raise RESTException('Missing Critical Parameter')
        self._last_refresh = None
        self._refresh_token(scope='read write execute')
        body_params = {'page_size': DEVICE_PER_PAGE, 'sort_field': 'fully_qualified_host_name', 'sort_order': 'asc'}
        self._post(f'api/v2/rmm/accounts/{self._account_id}/endpoints', body_params=body_params)

    def get_device_list(self):
        body_params = {'page_size': DEVICE_PER_PAGE, 'sort_field': 'fully_qualified_host_name', 'sort_order': 'asc'}
        response = self._post(f'api/v2/rmm/accounts/{self._account_id}/endpoints',
                              body_params=body_params)
        yield from response['endpoints']
        count = 1
        while response.get('next_cursor'):
            try:
                body_params = {'page_size': DEVICE_PER_PAGE, 'sort_field': 'fully_qualified_host_name',
                               'sort_order': 'asc', 'next_cursor': response.get('next_cursor')}
                response = self._post(f'api/v2/rmm/accounts/{self._account_id}/endpoints',
                                      body_params=body_params)
                yield from response['endpoints']
                count += 1
                if count * DEVICE_PER_PAGE > MAX_NUMBER_OF_DEVICES:
                    logger.error(f'GOT MAX NUMBER OF DEVICES! STOP')
                    break
            except Exception:
                logger.exception(f'Problem with malwarebytes fetch')
                break
