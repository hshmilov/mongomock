import logging
import datetime

from axonius.adapter_base import AdapterBase, AdapterProperty
from axonius.adapter_exceptions import ClientConnectionException
from axonius.clients.mssql.connection import MSSQLConnection
from axonius.devices.device_adapter import DeviceAdapter
from axonius.fields import Field
from axonius.mixins.configurable import Configurable
from axonius.utils.files import get_local_config_file
from axonius.utils.datetime import parse_date
from axonius.utils.parsing import get_exception_string, is_domain_valid
from axonius.clients.rest.connection import RESTConnection
from malwarebytes_adapter import consts
from malwarebytes_adapter.client_id import get_client_id

logger = logging.getLogger(f'axonius.{__name__}')


class MalwarebytesAdapter(AdapterBase, Configurable):
    # pylint: disable=R0902
    class MyDeviceAdapter(DeviceAdapter):
        client_version = Field(str, 'Client Version')
        client_status = Field(str, 'Client Status')
        policy_name = Field(str, 'Policy Name')
        last_update_time = Field(datetime.datetime, 'Last Update Time')
        last_offline_time = Field(datetime.datetime, 'Last Offline Time')
        last_scan_time = Field(datetime.datetime, 'Last Scan Time')
        database_date = Field(datetime.datetime, 'Database Date')
        database_version = Field(str, 'Database Version')
        is_mbae_active = Field(bool, 'Is Malwarebytes Anti Exploit Active')
        is_mbrw_active = Field(bool, 'Is Malwarebytes Ransomware Detection Active')

    def __init__(self):
        super().__init__(get_local_config_file(__file__))

    @staticmethod
    def _get_client_id(client_config):
        return get_client_id(client_config)

    def _test_reachability(self, client_config):
        RESTConnection.test_reachability(client_config.get(consts.MALWAREBYTES_HOST),
                                         port=client_config.get(consts.MALWAREBYTES_PORT,
                                                                consts.DEFAULT_MALWAREBYTES_PORT))

    def _connect_client(self, client_config):
        try:
            connection = MSSQLConnection(database=client_config.get(consts.MALWAREBYTES_DATABASE),
                                         server=client_config[consts.MALWAREBYTES_HOST],
                                         port=client_config.get(consts.MALWAREBYTES_PORT,
                                                                consts.DEFAULT_MALWAREBYTES_PORT),
                                         devices_paging=self.__devices_fetched_at_a_time)
            connection.set_credentials(username=client_config[consts.USER],
                                       password=client_config[consts.PASSWORD])
            with connection:
                pass  # check that the connection credentials are valid
            return connection
        except Exception as err:
            message = f'Error connecting to client host: {client_config[consts.MALWAREBYTES_HOST]}  ' \
                      f'database: ' \
                      f'{client_config.get(consts.MALWAREBYTES_DATABASE)}'
            logger.exception(message)
            raise ClientConnectionException(get_exception_string(client_connection_error=True))

    def _query_devices_by_client(self, client_name, client_data):
        client_data.set_devices_paging(self.__devices_fetched_at_a_time)
        with client_data:
            last_seen_table = client_data.query(consts.MALWAREBYTES_QUERY_LAST_SEEN)
            last_seen_table_dict = dict()
            for item in last_seen_table:
                if item.get('ClientID') and item.get('ClientID') not in last_seen_table_dict:
                    last_seen_table_dict[item.get('ClientID')] = parse_date(item.get('LastSeen'))
            for device_raw in client_data.query(consts.MALWAREBYTES_QUERY_DEVICES):
                yield device_raw, last_seen_table_dict

    def _clients_schema(self):
        return {
            'items': [
                {
                    'name': consts.MALWAREBYTES_HOST,
                    'title': 'MSSQL Server',
                    'type': 'string'
                },
                {
                    'name': consts.MALWAREBYTES_PORT,
                    'title': 'Port',
                    'type': 'integer',
                    'default': consts.DEFAULT_MALWAREBYTES_PORT,
                    'format': 'port'
                },
                {
                    'name': consts.MALWAREBYTES_DATABASE,
                    'title': 'Database',
                    'type': 'string'
                },
                {
                    'name': consts.USER,
                    'title': 'User Name',
                    'type': 'string'
                },
                {
                    'name': consts.PASSWORD,
                    'title': 'Password',
                    'type': 'string',
                    'format': 'password'
                }
            ],
            'required': [
                consts.MALWAREBYTES_HOST,
                consts.USER,
                consts.PASSWORD,
                consts.MALWAREBYTES_DATABASE
            ],
            'type': 'array'
        }

    # pylint: disable=R0912,R0915,R0914
    def _parse_raw_data(self, devices_raw_data):
        for device_raw, last_seen_table_dict in devices_raw_data:
            try:
                device = self._new_device_adapter()
                device_id = device_raw.get('ID')
                if not device_id:
                    logger.error(f'Found a device with no id: {device_raw}, skipping')
                    continue
                device.id = device_id + '_' + (device_raw.get('HostName') or '')
                device.hostname = device_raw.get('HostName')
                domain = device_raw.get('Domain')
                if is_domain_valid(domain):
                    device.domain = domain
                try:
                    mac = device_raw.get('MacAddress') if device_raw.get('MacAddress') else None
                    ips = [device_raw.get('IPAddress')] if device_raw.get('IPAddress') else None
                    if mac or ips:
                        device.add_nic(mac=mac, ips=ips)
                except Exception:
                    logger.exception(f'Problem adding nic to {device_raw}')
                device.client_version = device_raw.get('ClientVersion')
                client_statuses_dict = {'0': 'Offline', '1': 'Online', '2': 'Scanning', '3': 'Unregistered'}
                client_status = device_raw.get('Status')
                if client_status is not None and str(client_status) in client_statuses_dict:
                    device.client_status = client_statuses_dict[str(client_status)]
                device.policy_name = device_raw.get('PolicyName')
                device.database_date = parse_date(device_raw.get('DatabaseDate'))
                device.database_version = device_raw.get('DatabaseVersion')
                device.is_mbae_active = device_raw.get('IsMbaeActive') \
                    if isinstance(device_raw.get('IsMbaeActive'), bool) else None
                device.is_mbrw_active = device_raw.get('IsMbrwActive') \
                    if isinstance(device_raw.get('IsMbrwActive'), bool) else None
                device.figure_os((device_raw.get('OS') or '') + ' ' + (device_raw.get('ServicePack') or ''))
                try:
                    last_update_time = parse_date(device_raw.get('LastUpdateTime'))
                    device.last_update_time = last_update_time
                    last_offline_time = parse_date(device_raw.get('LastOfflineTime'))
                    device.last_offline_time = last_offline_time
                    if last_offline_time and last_update_time:
                        last_seen = max(last_offline_time, last_update_time)
                    else:
                        last_seen = last_update_time or last_offline_time
                    last_scan_time = parse_date(device_raw.get('LastScanTime'))
                    device.last_scan_time = last_scan_time
                    if last_seen and last_scan_time:
                        last_seen = max(last_seen, last_scan_time)
                    else:
                        last_seen = last_seen or last_scan_time
                    last_seen_from_dict = last_seen_table_dict.get(device_id)
                    if last_seen_from_dict:
                        last_seen = last_seen_from_dict
                    device.last_seen = last_seen
                except Exception:
                    logger.exception(f'Problem with last seen {device_raw}')
                try:
                    last_logon_user = device_raw.get('LastLogonUser')
                    last_logon_users = [last_logon_user] if last_logon_user else []
                    current_logon_user = device_raw.get('CurrentLogonUser')
                    if current_logon_user:
                        last_logon_users.append(current_logon_user)
                    if last_logon_users:
                        device.last_used_users = last_logon_users
                except Exception:
                    logger.exception(f'Problem getting users to')
                device.set_raw(device_raw)
                yield device
            except Exception:
                logger.exception(f'Problem adding device: {str(device_raw)}')

    @classmethod
    def adapter_properties(cls):
        return [AdapterProperty.Agent, AdapterProperty.Endpoint_Protection_Platform]

    @classmethod
    def _db_config_schema(cls) -> dict:
        return {
            'items': [
                {
                    'name': 'devices_fetched_at_a_time',
                    'type': 'integer',
                    'title': 'SQL pagination'
                }
            ],
            'required': ['devices_fetched_at_a_time'],
            'pretty_name': 'Malwarebytes Configuration',
            'type': 'array'
        }

    @classmethod
    def _db_config_default(cls):
        return {
            'devices_fetched_at_a_time': 1000
        }

    def _on_config_update(self, config):
        self.__devices_fetched_at_a_time = config['devices_fetched_at_a_time']
