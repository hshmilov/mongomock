import pytest

from qcore_adapter.protocol.qtp.qdp.clinical.clinical_enums import InfusionEvent
from qcore_adapter.protocol.qtp.qdp.clinical.ruleset_violation import LimitBoundType
from qcore_adapter.protocol.qtp.qdp.clinical_status2 import CSI_ELEMENTS, CSI_ITEM
from qcore_adapter.protocol.qtp.qtp_message import QtpMessage
from test_helpers.qcore_fake_pump import CLINICAL_STATUS_CONNECTIVITY_UPDATE

ClinicalStatusAlarmUpdate_woInfusion = bytearray.fromhex(
    'bbddfd0067103cbbe4119c9100000000f2070000075c042200000000d107000000000000f207000003010101044e6f6e65000000002030303030303030303030303030303030303030303030303030303030303030300136040001040d31302e32302e3130382e3131360b3235352e3235352e302e3007302e302e302e301135353a31313a35353a31303a46303a3535000130064853502d53441135353a31313a35353a31303a46303a353505024e41000635344d627073044f70656e04544b49500a3830322d31312d612d6e013000000001000004000000000000000002075c0422f3070000030003075c0422d30700000201011600ffffffffffff01000000cc')

ClinicalStatusWithAperiodicInfusion = bytearray.fromhex(
    'bbdd0402670a3cbbe4119c9100000000f7070000dc5b042200000000d107000000000000f707000008010101044e6f6e65000000002030303030303030303030303030303030303030303030303030303030303030300136050001040d31302e32302e3130382e3131360b3235352e3235352e302e3007302e302e302e301135353a31313a35353a31303a46303a3535000130064853502d53441135353a31313a35353a31303a46303a353505024e41000635344d627073044f70656e04544b49500a3830322d31312d612d6e013000000001000004000000000000000002dc5b0422f8070000020003075c0422f20700000001011600ffffffffffffffffffff0700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000230004810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f3235342e3235352e302e313031303428303030303030303030303030303030303030303030303030303030303030303030303030303030300100ffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000cc')

WithClinicalStatusInfusionUpdate = bytearray.fromhex(
    'bbddec01670c3dbbe4119c91000000001a000000d4e016220000000001000000000000001a00000004010101044e6f6e65000000002030303030303030303030303030303030303030303030303030303030303030300136040001040d31302e32302e3130382e3131360b3235352e3235352e302e3007302e302e302e301135353a31313a35353a31303a46303a3535000130064853502d53441135353a31313a35353a31303a46303a353505024e41000635344d627073044f70656e04544b49500a3830322d31312d612d6e013000000001000004000000000000000002d4e016221b000000020007d3e0162219000000010000000001000000007e000000000000000000000002000000010000000100000000000000000000003408000000000000340800007e000000000000000000000000000000000000000048080000000000001e000481000304000000000000004e400000000000004e40340800007e000000340800007e0000000000000000000000028000000f3235342e3235352e302e313031303428303030303030303030303030303030303030303030303030303030303030303030303030303030300100ffff0000000000000000000000000000000000000000000100000001000000010000000000000000000000010280000000000000a8160000a8160000cc')

RulesetViolationUpdate = bytearray.fromhex(
    'bbdd2d02670e3cbbe4119c91000000001b080000375c04220000000010080000000000001b08000005010101044e6f6e65000000002030303030303030303030303030303030303030303030303030303030303030300136060001040d31302e32302e3130382e3131360b3235352e3235352e302e3007302e302e302e301135353a31313a35353a31303a46303a3535000130064853502d53441135353a31313a35353a31303a46303a353505024e41000635344d627073044f70656e04544b49500a3830322d31312d612d6e013000000001000004000000000000000002375c04221c08000002000385720422120800000001011600ffffffffffffffffffff0700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000230004810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f3235342e3235352e302e313031303428303030303030303030303030303030303030303030303030303030303030303030303030303030300100ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000004375c04221b080000000000000400000000000300000009810000e803000000f80000000001000001cc')

SixCsiItems = bytearray.fromhex(
    'bbdd9002670c3cbbe4119c9100000000ef0e00006d66052200000000d50d000000000000ef0e000004020100044e6f6e65000000002030303030303030303030303030303030303030303030303030303030303030300136080001040d31302e32302e3130382e3131360b3235352e3235352e302e3007302e302e302e301135353a31313a35353a31303a46303a3535000130064853502d53441135353a31313a35353a31303a46303a353505024e41000635344d627073044f70656e04544b49500a3830322d31312d612d6e0130000000010000040000000000000000026d660522f00e0000010003d3650522da0d000000010010000000000000000100000003d3650522db0d000000010016000000000000000100000003d3650522dd0d00000001001c00000000000000010000000700660522e90e00000100000000010000000063010000000000000000000026000000020000000100000000000000f0000000304d0000f0000000304d0000630100000000000000f0000000a8160000a8160000f0000000f00000000f000581010000009a9999999999c93f0000000000003440204e000063010000204e0000630100000000000000000000028000000f3235342e3235352e302e313031303428303030303030303030303030303030303030303030303030303030303030303030303030303030300100ffff0000000000000000000000000000000000000000000000000001000000010000000000000000003440010100000001000000a8160000a8160000066d660522ee0e000000000000000100000000f90000000000000000000000260000000200000001000000000000001a180000063600001a18000006360000f9000000002a1700001a180000a8160000a81600001a1800001a180000cc')


class TestClinicalStatus2(object):

    def test_six_csi_items(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=SixCsiItems)
        elements = qtp.get_field(CSI_ELEMENTS)
        assert len(elements) == 8
        assert elements[6][CSI_ITEM]['infusion_event'] == InfusionEvent.Titration.name

    def test_ruleset_violation_update(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=RulesetViolationUpdate)
        assert qtp.get_field('segment') == 1
        assert qtp.get_field('limit_bound_type') == LimitBoundType.High.name

    def test_csi_connectivity_update(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=CLINICAL_STATUS_CONNECTIVITY_UPDATE)
        csi_elements = qtp.get_field(CSI_ELEMENTS)
        assert len(csi_elements) == 4
        assert qtp.get_field('qdp_message_type') == 'ClinicalStatusConnectivityUpdate'
        item_types = [item.csi_item_type for item in csi_elements]
        assert sorted(['Connectivity', 'Power', 'InfuserStatus', 'Alarm']) == sorted(item_types)

    def test_csi_alarm_update_wo_infusion(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=ClinicalStatusAlarmUpdate_woInfusion)
        assert qtp.get_field('qdp_message_type') == 'ClinicalStatusAlarmUpdate_woInfusion'

    def test_csi_with_aperiodic_infusion(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=ClinicalStatusWithAperiodicInfusion)
        csi_aperiodic_infusion = qtp.get_field(CSI_ELEMENTS)[4].csi_item
        assert csi_aperiodic_infusion.infusion_event == 'NotDocumented'
        assert csi_aperiodic_infusion.dl_id == '254.255.0.10104'

    def test_csi_infusion_update(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=WithClinicalStatusInfusionUpdate)
        assert qtp.get_field('qdp_message_type') == 'ClinicalStatusInfusionUpdate'
        pass


if __name__ == '__main__':
    pytest.main([__file__])
