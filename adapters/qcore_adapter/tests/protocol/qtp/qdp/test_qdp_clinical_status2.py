import pytest

from qcore_adapter.protocol.qtp.qdp.clinical.clinical_enums import InfusionEvent
from qcore_adapter.protocol.qtp.qdp.clinical.ruleset_violation import LimitBoundType
from qcore_adapter.protocol.qtp.qdp.clinical_status2 import CSI_ELEMENTS, CSI_ITEM
from qcore_adapter.protocol.qtp.qtp_message import QtpMessage
from test_helpers.qcore_fake_pump import CLINICAL_STATUS_CONNECTIVITY_UPDATE

new_message_format = bytearray(
    b'\xbb\xdd"\x02g\n<\xbb\xe4\x11\x9c\x91\x00\x00\x00\x00\x19\x16\x00\x00\xdb[\x04"\x00\x00\x00\x00\x10\x16\x00\x00\x00\x00\x00\x00\x19\x16\x00\x00\x08\x01\x01\x01\x04None\x00\x00\x00\x00 00000000000000000000000000000000\x016\x07\x00\x01\x04\r10.20.108.116\x0b255.255.0.0\x070.0.0.0\x1155:11:55:10:F0:55\x00\x010\x06HSP-SD\x1155:11:55:10:F0:55\x05\x02NA\x00\x0654Mbps\x04Open\x04TKIP\n802-11-a-n\x010\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x02\xdb[\x04"\x1a\x16\x00\x00\x02\x00\x03\xba\xab\x05"\x12\x16\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x03\xba\xab\x05"\x13\x16\x00\x00\x00\x01\x00\x16\x00\x00\x00\x00\x00\x07\xb8\xab\x05"\x14\x16\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x04\x81\x01\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f254.255.0.10104(0000000000000000000000000000000000000000\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x16\x00\x00\xa8\x16\x00\x00\x03\xba\xab\x05"\x15\x16\x00\x00\x00\x01\x01\x1c\x00\x00\x00\x00\x00\xcc')

new_alarm = bytearray(
    b'\xbb\xdd"\x02g\x0c<\xbb\xe4\x11\x9c\x91\x00\x00\x00\x00\x1d\x16\x00\x00@\\\x04"\x00\x00\x00\x00\x10\x16\x00\x00\x00\x00\x00\x00\x1d\x16\x00\x00\x04\x02\x01\x01\x04None\x00\x00\x00\x00 00000000000000000000000000000000\x016\x07\x00\x01\x04\r10.20.108.116\x0b255.255.0.0\x070.0.0.0\x1155:11:55:10:F0:55\x00\x010\x06HSP-SD\x1155:11:55:10:F0:55\x05\x02NA\x00\x0654Mbps\x04Open\x04TKIP\n802-11-a-n\x010\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x02@\\\x04"\x1e\x16\x00\x00\x01\x00\x03\xba\xab\x05"\x12\x16\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x03\xba\xab\x05"\x13\x16\x00\x00\x00\x01\x00\x16\x00\x00\x00\x00\x00\x03\xba\xab\x05"\x15\x16\x00\x00\x00\x01\x01\x1c\x00\x00\x00\x00\x00\x07@\\\x04"\x1c\x16\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00G\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0c\x17\x00\x00\x94o\x01\x00\x0c\x17\x00\x00\x94o\x01\x00\x00\x02\x00\x00\x00\x0c\x17\x00\x00\x0c\x17\x00\x00\xa8\x16\x00\x00\xa8\x16\x00\x00\x0c\x17\x00\x00\x1d\x00\t\x81\x10\x00\x01\x00\x9a\x99\x99\x99\x99\x99\xc9?\x00\x00\x00\x00\x00\xa0\x84@\xa0\x86\x01\x00!\x02\x00\x00\xa0\x86\x01\x00!\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0f254.255.0.10104(0000000000000000000000000000000000000000\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80K@\x0c\x17\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x80\x00\x00\x01\x00\x00\x00\xa8\x16\x00\x00\xa8\x16\x00\x00\xcc')

with_bolus = bytearray(
    b'\xbb\xdd\xd8\x02g\x0c<\xbb\xe4\x11\x9c\x91\x00\x00\x00\x00\xd9\x1b\x00\x00\x9f\\\x04"\x00\x00\x00\x00\x10\x16\x00\x00\x00\x00\x00\x00\xd9\x1b\x00\x00\x04\x02\x01\x01\x04None\x00\x00\x00\x00 00000000000000000000000000000000\x016\t\x00\x01\x04\r10.20.108.116\x0b255.255.0.0\x070.0.0.0\x1155:11:55:10:F0:55\x00\x010\x06HSP-SD\x1155:11:55:10:F0:55\x05\x02NA\x00\x0654Mbps\x04Open\x04TKIP\n802-11-a-n\x010\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x02\x9f\\\x04"\xda\x1b\x00\x00\x01\x00\x03\xf9[\x04"\x12\x16\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x03\xf9[\x04"\x13\x16\x00\x00\x00\x01\x00\x16\x00\x00\x00\x00\x00\x03\xf9[\x04"\x15\x16\x00\x00\x00\x01\x00\x1c\x00\x00\x00\x00\x00\x03\xf9[\x04"5\x16\x00\x00\x02\x01\x01\x14\x00\x00\x00G\x00\x07\x9f\\\x04"\xd8\x1b\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x00\x00\xfa\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xb0^\x00\x00d\x89S\x00\xb0^\x00\x00d\x89S\x00\xfa\x8b\x00\x00\x01\xca\x1d\xa0\xdc\x01\xcam?\x9a\x99\x99\x99\x99\x99\xc9?\x00\x00\x00\x00zS\x00\x00jc\x00\x00\xa8\x16\x00\x00\xa8\x16\x00\x00jc\x00\x00\r\x00\x05\x81\x80\x00\x01\x00\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x000\x81@`\xecS\x00\xa0\x8c\x00\x00`\xecS\x00\xa0\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0f254.255.0.10104(0000000000000000000000000000000000000000\x01\x00\xff\xff\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80K@jc\x00\x00\x01\x00\x00\x00\x00\x008\x81@\t\xf2\x94 O\t$@\x00\x00\x00\x00\x05\x81\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x81\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x08\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x02\x80\x00\x00\x00\x00\x00\x00\x000\x81@\x01\x01\x00\x00\x00\x01\x00\x00\x00\xa8\x16\x00\x00\xa8\x16\x00\x00\x06\x94\\\x04"\xd5\x1b\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x05\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00I\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00HX\x00\x00\xcc\x8fS\x00HX\x00\x00\xcc\x8fS\x00\x05\x8c\x00\x00\x00\xa4L\x00\x00\x94\\\x00\x00\xa8\x16\x00\x00\xa8\x16\x00\x00\x94\\\x00\x00\xcc')


class TestClinicalStatus2(object):

    def test_with_bolus(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=with_bolus)
        assert qtp.get_field('programmed_duration_field_details') == 2050
        assert qtp.get_field(CSI_ELEMENTS)[7][CSI_ITEM]['csi_infusion_state']['bolus_data']['delivered_volume'] == 0.2

    def test_new_alarm(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=new_alarm)
        csi_elements = qtp.get_field(CSI_ELEMENTS)
        assert len(csi_elements) == 7

    def test_new_message(self):
        qtp = QtpMessage()
        qtp.extend_bytes(bytes=new_message_format)
        csi_elements = qtp.get_field(CSI_ELEMENTS)
        assert len(csi_elements) == 7


if __name__ == '__main__':
    pytest.main([__file__])
