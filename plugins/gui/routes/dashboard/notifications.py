import logging

import pymongo
from bson import ObjectId
from flask import (jsonify,
                   request)

from axonius.utils.gui_helpers import (paginated, filtered, sorted_endpoint)
from axonius.utils.permissions_helper import PermissionCategory, PermissionAction, PermissionValue
from gui.logic.db_helpers import beautify_db_entry
from gui.logic.routing_helper import gui_section_add_rules, gui_route_logged_in
# pylint: disable=no-member,no-else-return,inconsistent-return-statements

logger = logging.getLogger(f'axonius.{__name__}')


@gui_section_add_rules('notifications')
class Notifications:

    @paginated()
    @filtered()
    @sorted_endpoint()
    @gui_route_logged_in(methods=['POST', 'GET'], required_permission=PermissionValue.get(
        PermissionAction.View, PermissionCategory.Dashboard))
    def notifications(self, limit, skip, mongo_filter, mongo_sort):
        """
        Get all notifications
        :param limit: limit for pagination
        :param skip: start index for pagination
        :return:
        """
        db = self._get_db_connection()
        notification_collection = db['core']['notifications']

        # GET
        if request.method == 'GET':
            should_aggregate = request.args.get('aggregate', False)
            if should_aggregate:
                pipeline = [{'$group': {'_id': '$title', 'count': {'$sum': 1}, 'date': {'$last': '$_id'},
                                        'severity': {'$last': '$severity'}, 'seen': {'$last': '$seen'}}},
                            {'$addFields': {'title': '$_id'}}]
                notifications = []
                for n in notification_collection.aggregate(pipeline):
                    n['_id'] = n['date']
                    notifications.append(beautify_db_entry(n))
            else:
                sort = []
                for field, direction in mongo_sort.items():
                    sort.append(('_id' if field == 'date_fetched' else field, direction))
                if not sort:
                    sort.append(('_id', pymongo.DESCENDING))
                notifications = [beautify_db_entry(n) for n in notification_collection.find(
                    mongo_filter, projection={'_id': 1, 'who': 1, 'plugin_name': 1, 'type': 1, 'title': 1,
                                              'seen': 1, 'severity': 1}).sort(sort).skip(skip).limit(limit)]

            return jsonify(notifications)
        # POST
        elif request.method == 'POST':
            # if no ID is sent all notifications will be changed to seen.
            notifications_to_see = request.get_json(silent=True)
            if notifications_to_see is None or len(notifications_to_see['notification_ids']) == 0:
                update_result = notification_collection.update_many(
                    {'seen': False}, {'$set': {'seen': notifications_to_see.get('seen', True)}})
            else:
                update_result = notification_collection.update_many(
                    {'_id': {'$in': [ObjectId(x) for x in notifications_to_see.get('notification_ids', [])]}
                     }, {'$set': {'seen': True}})
            return str(update_result.modified_count), 200

    @filtered()
    @gui_route_logged_in('count', methods=['GET'])
    def notifications_count(self, mongo_filter):
        """
        Fetches from core's notification collection, according to given mongo_filter,
        and counts how many entries in retrieved cursor
        :param mongo_filter: Generated by the filtered() decorator, according to uri param "filter"
        :return: Number of notifications matching given filter
        """
        db = self._get_db_connection()
        notification_collection = db['core']['notifications']
        return str(notification_collection.count_documents(mongo_filter))

    @gui_route_logged_in('<notification_id>', methods=['GET'])
    def notifications_by_id(self, notification_id):
        """
        Get all notification data
        :param notification_id: Notification ID
        :return:
        """
        db = self._get_db_connection()
        notification_collection = db['core']['notifications']
        return jsonify(
            beautify_db_entry(notification_collection.find_one({'_id': ObjectId(notification_id)})))
