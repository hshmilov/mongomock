worker_processes  1;
events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 1000M;

    server_tokens off;
    server {
            listen 80;
            server_name _;
            return 301 https://$host$request_uri;
        }

    server {
        listen 443 ssl;
        server_name axonius;
        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver_timeout 5s;
        # Disable preloading HSTS for now.  You can use the commented out header line that includes
        # the "preload" directive if you understand the implications.
        #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        access_log /home/axonius/logs/nginx-access.log;

        include /home/axonius/config/nginx_conf.d/*.conf;

        location /api {
            include uwsgi_params;
            uwsgi_pass unix:/tmp/openresty-uwsgi.sock;
            uwsgi_read_timeout 36000;
            uwsgi_send_timeout 36000;
            uwsgi_ignore_client_abort on;
        }
    }
}