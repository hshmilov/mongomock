import socket

from services.ports import DOCKER_PORTS

REGISTRATION_REQUEST = bytearray.fromhex(
    'bbdda9006701930200009c91910000000000000e0087d61200000000000000065143503635390110fc73044e6f6e65000000002030303030303030303030303030303030303030303030303030303030303030300136044e6f6e65000000000c31342e302e3132333435363707302e302e302e30034c434d000000000c31342e302e31323334353637013603504d4d000000000c31342e302e3132333435363707302e302e302e300100000000cc')

CLINICAL_STATUS_CONNECTIVITY_UPDATE = bytearray.fromhex(
    'bbddfd00670a3cbbe4119c91000000003f050000db5b04220000000038050000000000003f05000008010101044e6f6e65000000002030303030303030303030303030303030303030303030303030303030303030300136040001040d31302e32302e3130382e3131360b3235352e3235352e302e3007302e302e302e301135353a31313a35353a31303a46303a3535000130064853502d53441135353a31313a35353a31303a46303a353505024e41000635344d627073044f70656e04544b49500a3830322d31312d612d6e013000000001000004000000000000000002db5b0422400500000200033e4705223c0500000001011600ffffffffffffffffffffcc')


class QcoreFakePump(object):
    def __init__(self):
        self.conn = socket.create_connection(('localhost', DOCKER_PORTS['qcore-mediator']))

    def send_registration(self):
        self.conn.sendall(REGISTRATION_REQUEST)

    def send_connectivity_update(self):
        self.conn.sendall(CLINICAL_STATUS_CONNECTIVITY_UPDATE)
