import glob
import json
import os
import re
import socket
import sys
import time
import base64

import boto3
import requests

from builds.builds_factory import BuildsInstance
from test_helpers.ci_helper import TeamcityHelper
from testing.test import InstanceManager, execute, ARTIFACTS_DIR_ABSOLUTE, ARTIFACTS_DIR_RELATIVE

AWS_SAAS_PROD_ACCOUNT_ID = 604119231150
AWS_SAAS_PROD_ACCOUNT_NAME = 'ax-prod-saas'

DOCKER_INSTALL_COMMANDS = '''
sudo apt update && 
sudo rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock &&
sudo dpkg --configure -a &&
sudo apt -y install apt-transport-https ca-certificates curl software-properties-common && 
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && 
sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable' &&
sudo apt update && 
apt-cache policy docker-ce &&
sudo rm -f /var/lib/dpkg/lock /var/lib/dpkg/lock-frontend &&
sudo dpkg --configure -a && 
sudo apt install -y docker-ce && 
sudo systemctl start docker && 
sudo systemctl enable docker
'''

TUNNEL_INSTALL_CMD = 'curl -b session={session} {url}/api/tunnel/download_agent | sudo /bin/bash'
MAX_503_RETRIES = 40
TESTS_NAMES = [
    'tests.test_tunnel.TestTunnel.test_tunnel_connected',
    'tests.test_tunnel.TestTunnel.test_tunnel_disconnected',
    'tests.test_tunnel.TestTunnel.test_connect_adapter_to_tunnel',
    'tests.test_tunnel.TestTunnel.test_skip_adapter_fetch_if_tunnel_disconnected'
]

TUNNELER_RESOLV_CONF = '''# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 10.0.2.68
search c.axonius-office.internal axonius.lan google.internal'''

TC = TeamcityHelper()

API_USER = sys.argv[2]
API_KEY = sys.argv[3]
SAAS_CONTROL_URL = sys.argv[4]
HEADERS = {
    'x-axsaas-apiuser': API_USER,
    'x-axsaas-apikey': API_KEY,
    'CF-Access-Client-Id': sys.argv[5],
    'CF-Access-Client-Secret': sys.argv[6]
}


def delete_stack(stack_id):
    resp = requests.delete(f'{SAAS_CONTROL_URL}/environment_delete/{stack_id}', headers=HEADERS)
    if resp.status_code != 200:
        print(f'Error while deleting the testing stack {resp.content}')
        TC.print(f'Error while deleting the testing stack {resp.content}')
        return
    TC.print(f'Stack {stack_id} deleted successfully')


def main(ami_id=None):
    HEADERS['Content-Type'] = 'application/json'
    with TC.block('Initialize test stack'):
        try:
            resp = requests.post(f'{SAAS_CONTROL_URL}/environment_create', headers=HEADERS,
                                 data=json.dumps({
                                     'company_name': 'ax-saas-test-teamcity',
                                     'customer_email': 'test@axonius.com',
                                     'image_id': ami_id,
                                     'env_type': 'Test'
                                 })
                                 )
            assert resp.status_code == 200
            stack_id = resp.json()['data']['id']
            TC.print(f'Stack ID: {stack_id}')
            print(f'Stack ID: {stack_id}')
            resp.close()
            HEADERS.pop('Content-Type')
        except KeyError:
            print(f'Error in create environment API {resp.content}')
            TC.print(f'Error in create environment API {resp.content}')
            return

        # Takes about 10 minutes to raise the stack machine.
        TC.print('Waiting 14 minutes for the stack to initialize')
        time.sleep(14 * 60)

    with TC.block('Getting stack information'):
        try:
            resp = requests.get(f'{SAAS_CONTROL_URL}/environment_info/{stack_id}', headers=HEADERS)
            tries = 0
            assert resp.status_code == 200
            while resp.json()['data']['env_status'] != 'READY' and tries < 10:
                resp.close()
                time.sleep(30)
                resp = requests.get(f'{SAAS_CONTROL_URL}/environment_info/{stack_id}', headers=HEADERS)
                tries += 1
                assert resp.status_code == 200

            tunnel_url = resp.json()['data']['env_details']['tunnel_url']
            url = resp.json()['data']['env_details']['machine_url']
            print(f'Tunnel URL: {tunnel_url}')
            print(f'Web URL: {url}')
            TC.print(f'Tunnel URL: {tunnel_url}')
            TC.print(f'Web URL: {url}')
        except KeyError:
            print(f'Error in getting stack info {resp.content}')
            TC.print(f'Error in getting stack info {resp.content}')
            delete_stack(stack_id)
        except AssertionError:
            print(f'Error in response from SaaS Control API - Status Code: {resp.status_code}, Error: {resp.content}')
            TC.print(
                f'Error in response from SaaS Control API - Status Code: {resp.status_code}, Error: {resp.content}')
            delete_stack(stack_id)

    try:
        with TC.block('Raising GCP tunnel machine'):
            instance_manager = InstanceManager('gcp', 'n1-standard-8', 1)

            instance_manager._InstanceManager__instances, group_name = \
                instance_manager._InstanceManager__builds.create_instances(
                    'Sagi-Tunnel-tests',
                    instance_manager.instance_type,
                    instance_manager.number_of_instances,
                    instance_cloud=instance_manager._InstanceManager__builds.CloudType.GCP,
                    instance_image='ubuntu-test-machine-2',
                    force_password_change=True
                )
            instance = instance_manager._InstanceManager__instances[0]
            instance.wait_for_ssh()
            TC.print(f'GCP Tunnel machine raised: {instance.ip}, Credentials: ubuntu:{instance.ssh_pass}')

            # Install docker
            def install_docker():
                TC.print('Installing docker-ce on tunnel machine')
                instance_manager._InstanceManager__ssh_execute(instance, 'Install docker daemon on server',
                                                               DOCKER_INSTALL_COMMANDS,
                                                               append_ts=False)
            while True:
                try:
                    install_docker()
                    break
                except Exception:
                    time.sleep(20)
                    continue

            instance.wait_for_ssh()

            # Check docker installed successfully
            assert 'permission denied' not in \
                   instance_manager._InstanceManager__ssh_execute(instance,
                                                                  'Check docker installation',
                                                                  'sudo docker ps',
                                                                  append_ts=False)
            TC.print('docker-ce installed successfully')

        def _wait_for_hostname_to_resolv():
            try:
                socket.gethostbyname(tunnel_url)
            except OSError:
                time.sleep(20)
                _wait_for_hostname_to_resolv()

        _wait_for_hostname_to_resolv()

        axonius_instance = BuildsInstance(
            cloud=instance_manager._InstanceManager__builds.CloudType.AWS,
            instance_id=stack_id,
            ip=tunnel_url,
            ssh_user='ubuntu',
            ssh_pass='bringorder'
        )
        axonius_instance.wait_for_ssh()
        TC.print('Connected to stack machine using ssh')

        client_rb_file = instance_manager._InstanceManager__ssh_execute(axonius_instance,
                                                                        'Get Node id',
                                                                        'sudo cat /etc/chef/client.rb',
                                                                        append_ts=False)
        TC.print(f'client.rb file content: {client_rb_file}')

        # Create a copy of the testing folder and copy it to there.
        print(f'Creating source code tar and copying it..')
        execute('rm -rf testing.tar.gz')
        execute('tar czf testing.tar.gz testing/*')
        print(f'Transferring testing.tar.gz to stack..')
        with open('testing.tar.gz', 'rb') as fh:
            axonius_instance.put_file(fh, '/home/ubuntu/cortex/testing.tar.gz')
        instance_manager._InstanceManager__ssh_execute(axonius_instance,
                                                       'Unpack testing folder',
                                                       'cd /home/ubuntu/cortex; sudo rm -rf testing; sudo tar xzf testing.tar.gz; sudo chown -R ubuntu:ubuntu testing/',
                                                       append_ts=False)
        TC.print('Uploaded and extracted testing folder')

        tries_counter = 0
        while requests.get(url).status_code == 503 or tries_counter > MAX_503_RETRIES:
            # AWS Health checker yet to recognize server has finished initializing
            print(f'Iteration {tries_counter+1} of 503s')
            time.sleep(20)
            tries_counter += 1

        if tries_counter > MAX_503_RETRIES:
            raise Exception('Server keeps returning 503')

        # Get session id
        TC.print('Getting session id from stack machine')
        resp = requests.post(f'{url}/api/login',
                             data='{"user_name":"admin2","password":"kjhsjdhbfnlkih43598sdfnsdfjkh","remember_me":false}')
        session = re.findall('session=(.*?);', resp.headers['Set-Cookie'])[0]
        resp.close()

        # Connection will probably disconnect till it gets here
        instance.wait_for_ssh()

        TC.print(f'Got session id: {session}')

        # Download and install tunnel container
        instance_manager._InstanceManager__ssh_execute(instance, 'Download and install tunnel container',
                                                       TUNNEL_INSTALL_CMD.format(session=session, url=url),
                                                       append_ts=False)
        TC.print('Downloaded and installed tunnel container successfully on GCP machine')

        # Connection will probably disconnect till it gets here
        axonius_instance.wait_for_ssh()

        # Start Selenium container
        instance_manager._InstanceManager__ssh_execute(axonius_instance,
                                                       'Start Selenium container',
                                                       'cd /home/ubuntu/cortex; . ./prepare_python_env.sh; sh ./testing/test_credentials/docker_login.sh; python -c \'from services.standalone_services.selenium_service import SeleniumService; a = SeleniumService(); a.build(); a.take_process_ownership(); a.start()\'',
                                                       append_ts=False)
        TC.print('Started selenium container on stack machine')

        # Change permissions
        instance_manager._InstanceManager__ssh_execute(axonius_instance, 'Change axonius_settings folder permissions',
                                                       'sudo chown -R ubuntu:ubuntu /home/ubuntu/cortex/.axonius_settings',
                                                       append_ts=False,
                                                       timeout=600)

        instance_manager._InstanceManager__ssh_execute(instance, 'Update resolv file',
                                                       f'docker exec tunnel /bin/sh -c \'echo -n {base64.b64encode(TUNNELER_RESOLV_CONF.encode("utf-8")).decode("utf-8")} | base64 -d > /etc/resolv.conf\'',
                                                       append_ts=False,
                                                       as_root=True)
        TC.print('Updated resolv.conf on tunnel machine')

        # Start Tunnel tests
        TC.print('Starting tunnel pytest')
        instance_manager._InstanceManager__ssh_execute(axonius_instance, 'Start tunnel tests',
                                                       'cd /home/ubuntu/cortex; . ./prepare_python_env.sh; mkdir logs/TC_logs; cd ./testing/ui_tests; python3 -m pytest -v --junit-xml=/home/ubuntu/cortex/logs/TC_logs/artifacts.xml tests/test_tunnel.py &',
                                                       append_ts=False,
                                                       as_root=True,
                                                       timeout=15 * 60)

        TC.print('Waiting for the tests to finish')
        tries = 0
        time.sleep(20 * 60)
        axonius_instance.wait_for_ssh()
        while True:
            result = instance_manager._InstanceManager__ssh_execute(axonius_instance, 'Check tests status',
                                                                    'ls -la /home/ubuntu/cortex/logs/TC_logs/artifacts.xml',
                                                                    append_ts=False,
                                                                    timeout=60)
            tries += 1
            if 'No such file or directory' in result and tries < 5:
                time.sleep(60)
            else:
                break

        TC.print('Lower permissions of artifacts')
        instance_manager._InstanceManager__ssh_execute(axonius_instance, 'Lower permissions of artifacts',
                                                       'chown -R ubuntu:ubuntu /home/ubuntu/cortex/logs/TC_logs',
                                                       as_root=True,
                                                       append_ts=False)

        TC.print('Creating tarball from artifacts')
        instance_manager._InstanceManager__ssh_execute(axonius_instance, 'Creating tar for artifacts',
                                                       'cd /home/ubuntu/cortex/logs/TC_logs; tar czf artifacts.tgz artifacts.xml /home/ubuntu/cortex/screenshots/ /home/ubuntu/cortex/logs -P --warning=no-file-changed',
                                                       append_ts=False,
                                                       ignore_rc=True)
        TC.print('Getting tarball from server')
        with open(os.path.join(ARTIFACTS_DIR_ABSOLUTE, 'artifacts.tgz'), 'wb') as fh:
            fh.write(axonius_instance.get_file('/home/ubuntu/cortex/logs/TC_logs/artifacts.tgz'))

        TC.print('Publishing artifacts')
        execute(f'cd {ARTIFACTS_DIR_ABSOLUTE}; tar xvzf artifacts.tgz; rm -f artifacts.tgz')
        TC.publishArtifacts(ARTIFACTS_DIR_RELATIVE)
        TC.importData('junit', os.path.join(ARTIFACTS_DIR_RELATIVE, 'artifacts.xml'))

        time.sleep(3)
        for pic_id, png_relative_path in \
                enumerate(glob.iglob(os.path.join(ARTIFACTS_DIR_RELATIVE, 'home', 'ubuntu', 'cortex', 'screenshots', '**', '*.png'), recursive=True)):
            test_name = os.path.basename(os.path.dirname(png_relative_path))
            # We need to set a path relative to the artifacts folder, so we need to remove it from the png
            # relative path.
            TC.set_image_attachment(
                f'pytest: {test_name}',
                png_relative_path[len(ARTIFACTS_DIR_RELATIVE + os.path.sep):],
                name=f'pic_{pic_id}'
            )

    except Exception as e:
        print(f'Exception happened while trying to test tunnel {str(e)}')
        TC.buildProblem(description=str(e), identity='Tunnel_Tests')
    finally:
        instance_manager._InstanceManager__builds.terminate_all()
        delete_stack(stack_id)
        print('Terminated regular tunnel machine')
        TC.print('Terminated regular tunnel machine')


def image_sort(elem):
    return elem.get('CreationDate')


if __name__ == '__main__':
    if sys.argv[1] == 'latest':
        ec2_client = boto3.client('ec2', region_name='us-east-1')
        images = ec2_client.describe_images(Owners=['405773942477']).get('Images')
        images.sort(key=image_sort)
        ami_id = images.pop().get('ImageId')
    else:
        ami_id = sys.argv[1]
    main(ami_id=ami_id)
