import logging

from axonius.adapter_base import AdapterBase, AdapterProperty
from axonius.adapter_exceptions import ClientConnectionException
from axonius.clients.rest.connection import RESTConnection
from axonius.clients.rest.connection import RESTException
from axonius.devices.device_adapter import DeviceAdapter
from axonius.utils.files import get_local_config_file
from {adapter_name}_adapter.connection import {capital_adapter_name}Connection
from {adapter_name}_adapter.client_id import get_client_id

logger = logging.getLogger(f'axonius.{{__name__}}')


class {capital_adapter_name}Adapter(AdapterBase):
    class MyDeviceAdapter(DeviceAdapter):
        # AUTOADAPTER - add here device fields if needed
        pass

    def __init__(self, *args, **kwargs):
        super().__init__(config_file_path=get_local_config_file(__file__), *args, **kwargs)

    @staticmethod
    def _get_client_id(client_config):
        return get_client_id(client_config)

    @staticmethod
    def _test_reachability(client_config):
        return RESTConnection.test_reachability(client_config.get('domain'))

    @staticmethod
    def get_connection(client_config):
        with {capital_adapter_name}Connection(domain=client_config['domain'], verify_ssl=client_config['verify_ssl'],
                                              username=client_config['username'], password=client_config['password']
                                              ) as connection:
            return connection

    @staticmethod
    def _connect_client(client_config):
        try:
            return self.get_connection(client_config)
        except RESTException as e:
            message = 'Error connecting to client with domain {{0}}, reason: {{1}}'.format(
                client_config['domain'], str(e))
            logger.exception(message)
            raise ClientConnectionException(message)

    @staticmethod
    def _query_devices_by_client(client_name, client_data):
        """
        Get all devices from a specific  domain

        :param str client_name: The name of the client
        :param obj client_data: The data that represent a connection

        :return: A json with all the attributes returned from the Server
        """
        with client_data:
            yield from client_data.get_device_list()

    @staticmethod
    def _clients_schema():
        """
        The schema {capital_adapter_name}Adapter expects from configs

        :return: JSON scheme
        """
        return {{
            'items': [
                {{
                    'name': 'domain',
                    'title': '{capital_adapter_name} Domain',
                    'type': 'string'
                }},
                {{
                    'name': 'username',
                    'title': 'User Name',
                    'type': 'string'
                }},
                {{
                    'name': 'password',
                    'title': 'Password',
                    'type': 'string',
                    'format': 'password'
                }},
                {{
                    'name': 'verify_ssl',
                    'title': 'Verify SSL',
                    'type': 'bool'
                }}
            ],
            'required': [
                'domain',
                'username',
                'password',
                'verify_ssl'
            ],
            'type': 'array'
        }}

    def _parse_raw_data(self, devices_raw_data):
        for device_raw in devices_raw_data:
            try:
                device = self._new_device_adapter()
                # AUTOADAPTER - create device
                device.set_raw(device_raw)
                yield device
            except Exception:
                logger.exception(f'Problem with fetching {capital_adapter_name} Device for {{device_raw}}')

    @classmethod
    def adapter_properties(cls):
        # AUTOADAPTER - check if you need to add other properties'
        return [AdapterProperty.Assets]
