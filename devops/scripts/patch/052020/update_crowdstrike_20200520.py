#!/home/ubuntu/cortex/venv/bin/python

import sys
import subprocess
import base64
import os
import time

from testing.services.plugins import core_service

CORTEX = '/home/ubuntu/cortex'
FILES_TO_UPDATE = {
    f'{CORTEX}/adapters/crowd_strike_adapter/connection.py': b'',
    f'{CORTEX}/adapters/crowd_strike_adapter/service.py': b'',
}

ADAPTERS_TO_RESTART = ['crowd_strike']

COMMANDS_TO_RUN = []


def main():
    print(f'Updating CrowdStrike 2020-05-20')

    # assert current client
    cs = core_service.CoreService()
    print(f'Current client {cs.node_id}')

    # 1. Backup original
    try:
        for path_to_update in FILES_TO_UPDATE.keys():
            bak_path = f'{path_to_update}.bak'
            if os.path.exists(bak_path):
                os.unlink(bak_path)

        for path_to_update in FILES_TO_UPDATE.keys():
            os.rename(path_to_update, f'{path_to_update}.bak')
    except Exception:
        pass

    # 2. write new files
    for path_to_update, b64_contents in FILES_TO_UPDATE.items():
        with open(path_to_update, 'wb') as f:
            f.write(base64.b64decode(b64_contents))

    # 3. Restart adapters
    for adapter_name in ADAPTERS_TO_RESTART:
        restart_command = f'./se.sh re {adapter_name}'
        for i in range(5):
            try:
                print(f'running {restart_command}')
                subprocess.check_call(restart_command, shell=True, cwd=CORTEX)
                print(f'{restart_command} succeeded on trial {i}')
                break
            except Exception:
                print(f'{restart_command} on trial {i}')
                time.sleep(5)

    # 4. Restart GUI
    try:
        for command in COMMANDS_TO_RUN:
            print(f'Running {command}')
            subprocess.check_call(command, shell=True)
            print(f'Done running {command}')
    except Exception as e:
        print(f'An error has occurred, please proceed manually: {str(e)}')

    print(f'Done!')
    return 0


if __name__ == '__main__':
    sys.exit(main())
