import sys
import subprocess
import base64
import os

CONNECTION_PY_B64 = b''
SERVICE_PY_B64 = b''

CONNECTION_PY_PATH = '/home/ubuntu/cortex/adapters/azure_ad_adapter/connection.py'
SERVICE_PY_PATH = '/home/ubuntu/cortex/adapters/azure_ad_adapter/service.py'


def main():
    print(f'Upgrading Azure-AD Adapter to support Azure-AD B2C....')
    try:
        os.rename(CONNECTION_PY_PATH, CONNECTION_PY_PATH + '.bak')
        os.rename(SERVICE_PY_PATH, SERVICE_PY_PATH + '.bak')
    except Exception:
        pass

    with open(CONNECTION_PY_PATH, 'wb') as f:
        f.write(base64.b64decode(CONNECTION_PY_B64))

    with open(SERVICE_PY_PATH, 'wb') as f:
        f.write(base64.b64decode(SERVICE_PY_B64))

    subprocess.check_call('./axonius.sh adapter azure_ad up --restart --prod', shell=True, cwd='/home/ubuntu/cortex')

    print(f'Done!')
    return 0


if __name__ == '__main__':
    sys.exit(main())
