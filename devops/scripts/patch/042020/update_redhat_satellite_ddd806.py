#!/home/ubuntu/cortex/venv/bin/python

import sys
import subprocess
import base64
import os
import time

from testing.services.plugins import core_service

CORTEX = '/home/ubuntu/cortex'
FILES_TO_UPDATE = {
    f'{CORTEX}/adapters/redhat_satellite_adapter/connection.py': b'aW1wb3J0IGxvZ2dpbmcKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHBhcnRpYWxtZXRob2QKCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBPcHRpb25hbCwgSXRlcmFibGUKCmZyb20gYXhvbml1cy5jbGllbnRzLnJlc3QuY29ubmVjdGlvbiBpbXBvcnQgUkVTVENvbm5lY3Rpb24KZnJvbSBheG9uaXVzLmNsaWVudHMucmVzdC5leGNlcHRpb24gaW1wb3J0IFJFU1RFeGNlcHRpb24KZnJvbSByZWRoYXRfc2F0ZWxsaXRlX2FkYXB0ZXIgaW1wb3J0IGNvbnN0cwoKbG9nZ2VyID0gbG9nZ2luZy5nZXRMb2dnZXIoZidheG9uaXVzLntfX25hbWVfX30nKQoKCmNsYXNzIFJlZGhhdFNhdGVsbGl0ZUNvbm5lY3Rpb24oUkVTVENvbm5lY3Rpb24pOgogICAgIiIiIHJlc3QgY2xpZW50IGZvciBSZWRoYXRTYXRlbGxpdGUgYWRhcHRlciAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsIGZldGNoX2hvc3RfZmFjdHM6IGJvb2wsIGhvc3RzX2NodW5rX3NpemU6IGludCA9IGNvbnN0cy5ERVZJQ0VfUEVSX1BBR0UsICoqa3dhcmdzKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCphcmdzLCB1cmxfYmFzZV9wcmVmaXg9J2FwaScsCiAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAqKmt3YXJncykKICAgICAgICBzZWxmLl9mZXRjaF9ob3N0X2ZhY3RzID0gZmV0Y2hfaG9zdF9mYWN0cwogICAgICAgIHNlbGYuX2hvc3RzX2NodW5rX3NpemUgPSBob3N0c19jaHVua19zaXplCgogICAgZGVmIF9jb25uZWN0KHNlbGYpOgogICAgICAgIGlmIG5vdCBzZWxmLl91c2VybmFtZSBvciBub3Qgc2VsZi5fcGFzc3dvcmQ6CiAgICAgICAgICAgIHJhaXNlIFJFU1RFeGNlcHRpb24oJ05vIHVzZXJuYW1lIG9yIHBhc3N3b3JkJykKICAgICAgICAjIHJhaXNlcyBIVFRQRXJyb3IoNDAzLzQwMSkgaWYgdGhlcmUgYXJlIG5vIHBlcm1pc3Npb25zCiAgICAgICAgaG9zdCA9IG5leHQoc2VsZi5faXRlcl9ob3N0cyhsaW1pdD0xLCBzaG91bGRfcmFpc2U9VHJ1ZSksIE5vbmUpCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoaG9zdCwgZGljdCk6CiAgICAgICAgICAgIG1lc3NhZ2UgPSAnSW52YWxpZCBob3N0cyByZXNwb25zZSByZWNlaXZlZCBmcm9tIFNhdGVsbGl0ZSBTZXJ2ZXIuIFBsZWFzZSBjb250YWN0IEF4b25pdXMuJwogICAgICAgICAgICBsb2dnZXIud2FybmluZyhmJ3ttZXNzYWdlfSB7aG9zdH0nKQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24obWVzc2FnZSkKCiAgICAgICAgIyBvbmx5IGNoZWNrIGZhY3RzIGlmIGl0IHdhcyByZXF1ZXN0ZWQgYW5kIHRoZSBmaXJzdCBob3N0IGhhZCBob3N0X25hbWUKICAgICAgICBpZiBzZWxmLl9mZXRjaF9ob3N0X2ZhY3RzIGFuZCBpc2luc3RhbmNlKGhvc3QuZ2V0KCduYW1lJyksIHN0cik6CiAgICAgICAgICAgIGZhY3RzID0gc2VsZi5fZ2V0KCoqc2VsZi5fcmVxdWVzdF9wYXJhbXNfZm9yX2ZhY3RzX2Zvcl9ob3N0KGhvc3RbJ25hbWUnXSkpCiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGZhY3RzLCBkaWN0KToKICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnSW52YWxpZCBmYWN0cyByZXNwb25zZSByZWNlaXZlZCBmcm9tIFNhdGVsbGl0ZSBTZXJ2ZXIuIFBsZWFzZSBjb250YWN0IEF4b25pdXMuJwogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZid7bWVzc2FnZX0ge2ZhY3RzfScpCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24obWVzc2FnZSkKCiAgICAjIHB5bGludDogZGlzYWJsZT1hcmd1bWVudHMtZGlmZmVyCiAgICBkZWYgX2RvX3JlcXVlc3Qoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAjIGlmIG5vdCBpbnN0cnVjdGVkIG90aGVyd2lzZSwgZGVmYXVsdCB0byBiYXNpYyBhdXRoCiAgICAgICAga3dhcmdzLnNldGRlZmF1bHQoJ2RvX2Jhc2ljX2F1dGgnLCBUcnVlKQogICAgICAgIHJldHVybiBzdXBlcigpLl9kb19yZXF1ZXN0KCphcmdzLCAqKmt3YXJncykKCiAgICAjIHB5bGludDogZGlzYWJsZT1hcmd1bWVudHMtZGlmZmVyCiAgICBkZWYgX2hhbmRsZV9yZXNwb25zZShzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHJlc3BvbnNlID0gc3VwZXIoKS5faGFuZGxlX3Jlc3BvbnNlKCphcmdzLCAqKmt3YXJncykKICAgICAgICBpZiBpc2luc3RhbmNlKHJlc3BvbnNlLCBkaWN0KToKICAgICAgICAgICAgZXJyb3JfZGljdCA9IHJlc3BvbnNlLmdldCgnZXJyb3InKQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGVycm9yX2RpY3QsIGRpY3QpOgogICAgICAgICAgICAgICAgcmFpc2UgUkVTVEV4Y2VwdGlvbihmJ1JlZCBIYXQgU2F0ZWxsaXRlIEVycm9yOiB7ZXJyb3JfZGljdH0nKQogICAgICAgIHJldHVybiByZXNwb25zZQoKICAgIGRlZiBfcGFnaW5hdGVkX3JlcXVlc3Qoc2VsZiwgKmFyZ3MsIGxpbWl0OiBPcHRpb25hbFtpbnRdID0gTm9uZSwgc2hvdWxkX3JhaXNlPUZhbHNlLCAqKmt3YXJncyk6CiAgICAgICAgcGFnaW5hdGlvbl9wYXJhbXMgPSBrd2FyZ3Muc2V0ZGVmYXVsdCgKICAgICAgICAgICAgJ3VybF9wYXJhbXMnIGlmIChrd2FyZ3MuZ2V0KCdtZXRob2QnKSBvciBhcmdzWzBdKSA9PSAnR0VUJwogICAgICAgICAgICBlbHNlICdib2R5X3BhcmFtcycsIHt9KQoKICAgICAgICBjaHVua19zaXplID0gc2VsZi5faG9zdHNfY2h1bmtfc2l6ZQogICAgICAgIGlmIGlzaW5zdGFuY2UobGltaXQsIGludCk6CiAgICAgICAgICAgIGNodW5rX3NpemUgPSBtaW4oY2h1bmtfc2l6ZSwgbGltaXQpCiAgICAgICAgcGFnaW5hdGlvbl9wYXJhbXMuc2V0ZGVmYXVsdCgncGVyX3BhZ2UnLCBjaHVua19zaXplKQoKICAgICAgICBjdXJyX3BhZ2UgPSBwYWdpbmF0aW9uX3BhcmFtcy5zZXRkZWZhdWx0KCdwYWdlJywgMSkgICMgcGFnZSBpcyAxLWluZGV4IGJhc2VkCiAgICAgICAgIyBOb3RlOiBpbml0aWFsIHZhbHVlIHVzZWQgb25seSBmb3IgaW5pdGlhbCB3aGlsZSBpdGVyYXRpb24KICAgICAgICB0b3RhbF9jb3VudCA9IGNvdW50X3NvX2ZhciA9IDAKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdoaWxlIGNvdW50X3NvX2ZhciA8PSBtaW4odG90YWxfY291bnQsIGxpbWl0IG9yIGNvbnN0cy5NQVhfTlVNQkVSX09GX0RFVklDRVMpOgogICAgICAgICAgICAgICAgcGFnaW5hdGlvbl9wYXJhbXNbJ3BhZ2UnXSA9IGN1cnJfcGFnZQogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBzZWxmLl9kb19yZXF1ZXN0KCphcmdzLCAqKmt3YXJncykKCiAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVzcG9uc2UuZ2V0KCdyZXN1bHRzJykKICAgICAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHJlc3VsdHMsIChsaXN0LCBkaWN0KSk6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYnSW52YWxpZCByZXN1bHRzIHJldHVybmVkIGFmdGVyIHtjb3VudF9zb19mYXJ9L3t0b3RhbF9jb3VudH06IHtyZXN1bHRzfScpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICBpZiBsZW4ocmVzdWx0cykgPT0gMDoKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmJ05vIHJlc3VsdHMgcmV0dXJuZWQgYWZ0ZXIge2NvdW50X3NvX2Zhcn0ve3RvdGFsX2NvdW50fScpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShyZXN1bHRzLCBkaWN0KToKICAgICAgICAgICAgICAgICAgICB5aWVsZCBmcm9tIHJlc3VsdHMuaXRlbXMoKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICB5aWVsZCBmcm9tIHJlc3VsdHMKCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgY291bnRfc29fZmFyICs9IGxlbihyZXN1bHRzKQogICAgICAgICAgICAgICAgICAgICMgc3VidG90YWwgZGVmaW50aW9uIGZyb20gdGhlIGRvY3VtZW50YXRpb246CiAgICAgICAgICAgICAgICAgICAgIyAgIFRoZSBudW1iZXIgb2Ygb2JqZWN0cyByZXR1cm5lZCB3aXRoIHRoZSBnaXZlbiBzZWFyY2ggcGFyYW1ldGVycy4gSWYgdGhlcmUgaXMgbm8KICAgICAgICAgICAgICAgICAgICAjICAgc2VhcmNoLCB0aGVuIHN1YnRvdGFsIGlzIGVxdWFsIHRvIHRvdGFsLgogICAgICAgICAgICAgICAgICAgIHRvdGFsX2NvdW50ID0gaW50KHJlc3BvbnNlLmdldCgnc3VidG90YWwnKSBvciAwKQogICAgICAgICAgICAgICAgZXhjZXB0IChWYWx1ZUVycm9yLCBUeXBlRXJyb3IpOgogICAgICAgICAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZidSZWNlaXZlZCBpbnZhbGlkIHBhZ2luYXRpb24gdmFsdWVzIGFmdGVyL29uIHtjb3VudF9zb19mYXJ9L3t0b3RhbF9jb3VudH0nKQogICAgICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgICAgIGlmIHRvdGFsX2NvdW50IDw9IDA6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZidEb25lIHBhZ2luYXRlZCByZXF1ZXN0IGFmdGVyIHtjb3VudF9zb19mYXJ9L3t0b3RhbF9jb3VudH0nKQogICAgICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgICAgIGN1cnJfcGFnZSA9IGN1cnJfcGFnZSArIDEKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dlci5leGNlcHRpb24oZidGYWlsZWQgcGFnaW5hdGVkIHJlcXVlc3QgYWZ0ZXIge2NvdW50X3NvX2Zhcn0ve3RvdGFsX2NvdW50fScpCiAgICAgICAgICAgIGlmIHNob3VsZF9yYWlzZToKICAgICAgICAgICAgICAgIHJhaXNlIGUKCiAgICBwYWdpbmF0ZWRfZ2V0ID0gcGFydGlhbG1ldGhvZChfcGFnaW5hdGVkX3JlcXVlc3QsICdHRVQnKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBfcmVxdWVzdF9wYXJhbXNfZm9yX2ZhY3RzX2Zvcl9ob3N0KGhvc3RfbmFtZSk6CiAgICAgICAgcmV0dXJuIHsnbmFtZSc6IGYndjIvaG9zdHMve2hvc3RfbmFtZX0vZmFjdHMnfQoKICAgIGRlZiBfaXRlcl9hc3luY19mYWN0c19mb3JfaG9zdHMoc2VsZiwgaG9zdF9uYW1lczogSXRlcmFibGVbc3RyXSk6CiAgICAgICAgZmFjdF9yZXF1ZXN0cyA9IHtob3N0X25hbWU6IHNlbGYuX3JlcXVlc3RfcGFyYW1zX2Zvcl9mYWN0c19mb3JfaG9zdChob3N0X25hbWUpIGZvciBob3N0X25hbWUgaW4gaG9zdF9uYW1lc30KCiAgICAgICAgIyBIYW5kbGUgc3VjY2VzZnVsIGZhY3QgcmV0cmlldmFscwogICAgICAgIGZvciByZXNwb25zZSBpbiBzZWxmLl9hc3luY19nZXRfb25seV9nb29kX3Jlc3BvbnNlKGZhY3RfcmVxdWVzdHMudmFsdWVzKCkpOgogICAgICAgICAgICBpZiBub3QgKGlzaW5zdGFuY2UocmVzcG9uc2UsIGRpY3QpIGFuZCBpc2luc3RhbmNlKHJlc3BvbnNlLmdldCgncmVzdWx0cycpLCBkaWN0KSk6CiAgICAgICAgICAgICAgICBsb2dnZXIud2FybmluZyhmJ2ludmFsaWQgcmVzcG9uc2UgcmV0dXJuZWQ6IHtyZXNwb25zZX0nKQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgZm9yIGhvc3RfbmFtZSwgZmFjdHMgaW4gcmVzcG9uc2VbJ3Jlc3VsdHMnXS5pdGVtcygpOgogICAgICAgICAgICAgICAgaWYgbm90IGZhY3RfcmVxdWVzdHMucG9wKGhvc3RfbmFtZSk6CiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoZidjYW5ub3QgZmluZCBob3N0bmFtZSB7aG9zdF9uYW1lfSBpbiByZXF1ZXN0cycpCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgICAgICB5aWVsZCAoaG9zdF9uYW1lLCBmYWN0cykKCiAgICAgICAgIyBZaWVsZCB0aGUgcmVzdCBvZiB0aGUgaG9zdHMKICAgICAgICBsb2dnZXIuaW5mbyhmJ1RoZSBmb2xsb3dpbmcgaG9zdF9uYW1lcyBkaWQgbm90IHJldHVybiBmYWN0czoge2xpc3QoZmFjdF9yZXF1ZXN0cy5rZXlzKCkpfScpCiAgICAgICAgeWllbGQgZnJvbSAoKGhvc3RfbmFtZSwgTm9uZSkgZm9yIGhvc3RfbmFtZSBpbiBmYWN0X3JlcXVlc3RzLmtleXMoKSkKCiAgICBkZWYgX2l0ZXJfaG9zdHNfYW5kX2ZhY3RzKHNlbGYsIGxpbWl0OiBPcHRpb25hbFtpbnRdPU5vbmUpOgoKICAgICAgICBob3N0c19ieV9ob3N0bmFtZSA9IHt9ICAjIHR5cGU6IERpY3Rbc3RyLCBMaXN0W0RpY3RdXQoKICAgICAgICBkZWYgX2luamVjdF9mYWN0c19hbmRfZmx1c2hfaG9zdHMoKToKICAgICAgICAgICAgaWYgbm90IGhvc3RzX2J5X2hvc3RuYW1lOgogICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgICAgICBmb3IgaG9zdF9uYW1lLCBmYWN0c19yZXNwb25zZSBpbiBzZWxmLl9pdGVyX2FzeW5jX2ZhY3RzX2Zvcl9ob3N0cyhob3N0c19ieV9ob3N0bmFtZS5rZXlzKCkpOgogICAgICAgICAgICAgICAgZm9yIGhvc3QgaW4gKGhvc3RzX2J5X2hvc3RuYW1lLnBvcChob3N0X25hbWUsIE5vbmUpIG9yIFtdKToKICAgICAgICAgICAgICAgICAgICAjIE5vdGU6IGZhY3RzX3Jlc3BvbnNlIG1pZ2h0IGJlIE5vbmUgaWYgbm8gZmFjdHMgd2VyZSByZXR1cm5lZCBmb3IgaG9zdF9uYW1lCiAgICAgICAgICAgICAgICAgICAgaG9zdFtjb25zdHMuQVRUUl9JTkpFQ1RFRF9GQUNUU10gPSBmYWN0c19yZXNwb25zZQogICAgICAgICAgICAgICAgICAgIHlpZWxkIGhvc3QKCiAgICAgICAgICAgICMgeWllbGQgdGhlIHJlc3QgaWYgZm9yIHNvbWUgcmVhc29uIG5vdCB5aWVsZGVkIGJ5IHNlbGYuX2l0ZXJfYXN5bmNfZmFjdHNfZm9yX2hvc3RzCiAgICAgICAgICAgICMgTm90ZTogdGhpcyByZWxpZXMgb24gdGhlIGRpY3QucG9wIGFib3ZlIHRvIGNsZWFyIGFueSBob3N0IGZyb20gdGhlIGRpY3QgdGhhdCB3YXMgeWllbGRlZCBieSBmYWN0cwogICAgICAgICAgICBmb3IgaG9zdF9uYW1lLCBob3N0cyBpbiBob3N0c19ieV9ob3N0bmFtZToKICAgICAgICAgICAgICAgIHlpZWxkIGZyb20gaG9zdHMKCiAgICAgICAgZm9yIGksIGhvc3QgaW4gZW51bWVyYXRlKHNlbGYuX2l0ZXJfaG9zdHMobGltaXQ9bGltaXQpKToKICAgICAgICAgICAgaG9zdF9uYW1lID0gaG9zdC5nZXQoJ25hbWUnKQogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShob3N0X25hbWUsIHN0cik6CiAgICAgICAgICAgICAgICAjIGhvc3RzIHdpdGggbm8gaG9zdG5hbWUgYXJlIHlpZWxkZWQgaGVyZQogICAgICAgICAgICAgICAgeWllbGQgaG9zdAogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgICMgTm90ZTogd2UncmUgcG9wcGluZyB0aGUgaG9zdHMgZm9yIHRoZSBjdXJyZW50IGhvc3RfbmFtZSBiZWNhdXNlIHdlIGRvbnQgbmVlZCB0aGVtIGFueW1vcmUuCiAgICAgICAgICAgIGhvc3RzX2J5X2hvc3RuYW1lLnNldGRlZmF1bHQoaG9zdF9uYW1lLCBbXSkuYXBwZW5kKGhvc3QpCgogICAgICAgICAgICAjIGFmdGVyIGV2ZXJ5IHBhZ2UsIHJ1biB0aGUgZmFjdHMgcmVxdWVzdHMKICAgICAgICAgICAgaWYgKGkgJSBzZWxmLl9ob3N0c19jaHVua19zaXplKSA9PSAwOgogICAgICAgICAgICAgICAgeWllbGQgZnJvbSBfaW5qZWN0X2ZhY3RzX2FuZF9mbHVzaF9ob3N0cygpCgogICAgICAgICMgcGVyZm9ybSBmYWN0cyBpbmplY3Rpb24gYW5kIGZsdXNoIHRoZSByZXN0CiAgICAgICAgeWllbGQgZnJvbSBfaW5qZWN0X2ZhY3RzX2FuZF9mbHVzaF9ob3N0cygpCgogICAgZGVmIF9pdGVyX2hvc3RzKHNlbGYsIGxpbWl0OiBPcHRpb25hbFtpbnRdPU5vbmUsIHNob3VsZF9yYWlzZT1GYWxzZSk6CiAgICAgICAgeWllbGQgZnJvbSBzZWxmLnBhZ2luYXRlZF9nZXQoJ3YyL2hvc3RzJywgbGltaXQ9bGltaXQsIHNob3VsZF9yYWlzZT1zaG91bGRfcmFpc2UpCgogICAgZGVmIGdldF9kZXZpY2VfbGlzdChzZWxmKToKICAgICAgICBpZiBzZWxmLl9mZXRjaF9ob3N0X2ZhY3RzOgogICAgICAgICAgICB5aWVsZCBmcm9tIHNlbGYuX2l0ZXJfaG9zdHNfYW5kX2ZhY3RzKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICB5aWVsZCBmcm9tIHNlbGYuX2l0ZXJfaG9zdHMoKQo=',
    f'{CORTEX}/adapters/redhat_satellite_adapter/consts.py': b'aW1wb3J0IHJlCgpERVZJQ0VfUEVSX1BBR0UgPSAyMDAKTUFYX05VTUJFUl9PRl9ERVZJQ0VTID0gMjAwMDAwMAoKQVRUUl9JTkpFQ1RFRF9GQUNUUyA9ICdzYXRlbGxpdGVfZmFjdHMnCgpWRVJJU09OX0ZJRUxEU19UT19TT0ZUV0FSRV9OQU1FUyA9IHsKICAgICdhdWdlYXN2ZXJzaW9uJzogJ0F1Z2VhcycsCiAgICAnZmFjdGVydmVyc2lvbic6ICdGYWN0ZXInCn0KClJFX0ZJRUxEX05FVF9JTlRFUkZBQ0VfRVhDRVBUX0xPID0gcmUuY29tcGlsZShyJ15uZXRcLmludGVyZmFjZVwuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcicoPyFsbyknICAjIGV4Y3BldCBmb3IgImxvIiBpbnRlcmZhY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHInKD9QPGludGVyZmFjZV9uYW1lPlteLl0rPylcLicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHInKD9QPGludGVyZmFjZV9maWVsZD4uKz8pJCcsIHJlLk1VTFRJTElORSkK',
    f'{CORTEX}/adapters/redhat_satellite_adapter/service.py': b'',
}


def main():
    print(f'Updating Red Hat Satellite to ddd8061ee53d946496f56fcf1d2682bd2123a59a')

    # assert current client
    cs = core_service.CoreService()
    print(f'Current client {cs.node_id}')

    # 1. Backup original
    try:
        for path_to_update in FILES_TO_UPDATE.keys():
            bak_path = f'{path_to_update}.bak'
            if os.path.exists(bak_path):
                os.unlink(bak_path)

        for path_to_update in FILES_TO_UPDATE.keys():
            os.rename(path_to_update, f'{path_to_update}.bak')
    except Exception:
        pass

    # 2. write new files
    for path_to_update, b64_contents in FILES_TO_UPDATE.items():
        with open(path_to_update, 'wb') as f:
            f.write(base64.b64decode(b64_contents))

    # 3. Restart adapter
    for i in range(5):
        try:
            subprocess.check_call('./se.sh re redhat_satellite',
                                  shell=True, cwd=CORTEX)
            print(f'se.sh re succeeded on trial {i}')
            break
        except Exception:
            print(f'Failed se.sh re on trial {i}')
            time.sleep(5)

    try:
        subprocess.check_call('./se.sh af redhat_satellite_adapter_0 --nonblock',
                              shell=True, cwd=CORTEX)
        print(f'se.sh af succeeded')
    except Exception:
        print(f'Failed se.sh af')

    print(f'Done!')
    return 0


if __name__ == '__main__':
    sys.exit(main())
