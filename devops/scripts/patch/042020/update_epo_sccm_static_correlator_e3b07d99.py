#!/home/ubuntu/cortex/venv/bin/python

import sys
import subprocess
import base64
import os

from testing.services.plugins import core_service

CORTEX = '/home/ubuntu/cortex'
FILES_TO_UPDATE = {
    f'{CORTEX}/adapters/epo_adapter/service.py': b'',
    f'{CORTEX}/adapters/sccm_adapter/service.py': b'',
    f'{CORTEX}/adapters/sccm_adapter/consts.py': b'UEFTU1dPUkQgPSAncGFzc3dvcmQnClVTRVIgPSAndXNlcm5hbWUnClNDQ01fSE9TVCA9ICdzZXJ2ZXInClNDQ01fUE9SVCA9ICdwb3J0JwpTQ0NNX0RBVEFCQVNFID0gJ2RhdGFiYXNlJwpEUklWRVIgPSAnZHJpdmVyJwpERUZBVUxUX1NDQ01fUE9SVCA9IDE0MzMKREVWSUNFU19GRVRFQ0hFRF9BVF9BX1RJTUUgPSAnZGV2aWNlc19mZXRjaGVkX2F0X2FfdGltZScKU0NDTV9RVUVSWSA9ICIiIgpTRUxFQ1QgKiwKICAgICAgICBbTmV0d29yayBJbnRlcmZhY2VzXSA9IFNUVUZGKChTRUxFQ1QgJzsnICsgcmFzaS5NQUNBZGRyZXNzMCArICdAJyArIHJhc2kuSVBBZGRyZXNzMAogICAgICAgICAgICAgICAgRlJPTSB2X0dTX05FVFdPUktfQURBUFRFUl9DT05GSUdVUkFUSU9OIEFTIHJhc2kKICAgICAgICAgICAgICAgIFdIRVJFIHJhc2kuUmVzb3VyY2VJRCA9IFNZUy5SZXNvdXJjZUlECiAgICAgICAgICAgICAgICBGT1IgWE1MIFBBVEgsIFRZUEUpLnZhbHVlKE4nLlsxXScsTidudmFyY2hhcihtYXgpJyksMSwxLCcnKSwKICAgICAgICBbTWFjIEFkZHJlc3Nlc10gPSBTVFVGRigoU0VMRUNUICc7JyArIHJhc2kuTUFDQWRkcmVzczAKICAgICAgICAgICAgICAgIEZST00gdl9HU19ORVRXT1JLX0FEQVBURVJfQ09ORklHVVJBVElPTiBBUyByYXNpCiAgICAgICAgICAgICAgICBXSEVSRSByYXNpLlJlc291cmNlSUQgPSBTWVMuUmVzb3VyY2VJRAogICAgICAgICAgICAgICAgRk9SIFhNTCBQQVRILCBUWVBFKS52YWx1ZShOJy5bMV0nLE4nbnZhcmNoYXIobWF4KScpLDEsMSwnJyksCiAgICAgICAgW0lQIEFkZHJlc3Nlc10gPSBTVFVGRigoU0VMRUNUICc7JyArIHJhc2kuSVBBZGRyZXNzMAogICAgICAgICAgICAgICAgRlJPTSB2X0dTX05FVFdPUktfQURBUFRFUl9DT05GSUdVUkFUSU9OIEFTIHJhc2kKICAgICAgICAgICAgICAgIFdIRVJFIHJhc2kuUmVzb3VyY2VJRCA9IFNZUy5SZXNvdXJjZUlECiAgICAgICAgICAgICAgICBGT1IgWE1MIFBBVEgsIFRZUEUpLnZhbHVlKE4nLlsxXScsTidudmFyY2hhcihtYXgpJyksMSwxLCcnKSwKICAgICAgICBbTGFzdCBTZWVuXSA9IHZfQ0hfQ2xpZW50U3VtbWFyeS5MYXN0QWN0aXZlVGltZQpGUk9NIHZfUl9TWVNURU0gU1lTCkxFRlQgSk9JTiB2X0dTX0NPTVBVVEVSX1NZU1RFTSBvbiBTWVMuUmVzb3VyY2VJRCA9IHZfR1NfQ09NUFVURVJfU1lTVEVNLlJlc291cmNlSUQKTEVGVCBKT0lOIHZfQ0hfQ2xpZW50U3VtbWFyeSBvbiB2X0NIX0NsaWVudFN1bW1hcnkuUmVzb3VyY2VJRCA9IFNZUy5SZXNvdXJjZUlEIApMRUZUIEpPSU4gdl9HU19PUEVSQVRJTkdfU1lTVEVNIG9uIFNZUy5SZXNvdXJjZUlEID0gdl9HU19PUEVSQVRJTkdfU1lTVEVNLlJlc291cmNlSUQKezB9CiIiIgpMSU1JVF9TQ0NNX1FVRVJZID0gIiIiCldIRVJFIERBVEVESUZGKGRkLHZfQ0hfQ2xpZW50U3VtbWFyeS5MYXN0QWN0aXZlVGltZSxHRVREQVRFKCkpPHswfS8yNC4wOwoiIiIKClNDQ01fTUFJTl9RVUVSWSA9ICdTZWxlY3QgKiBmcm9tIHZfUl9TWVNURU0nCgpOSUNTX1FVRVJZID0gJ1NlbGVjdCBNQUNBZGRyZXNzMCwgSVBBZGRyZXNzMCwgUmVzb3VyY2VJRCBmcm9tIHZfR1NfTkVUV09SS19BREFQVEVSX0NPTkZJR1VSQVRJT04nCkNPTVBVVEVSX1NZU1RFTV9RVUVSWSA9ICdTZWxlY3QgUmVzb3VyY2VJRCwgQ2FwdGlvbjAsIE1vZGVsMCwgU3lzdGVtVHlwZTAsIFVzZXJOYW1lMCwgQ3VycmVudFRpbWVab25lMCBmcm9tIHZfR1NfQ09NUFVURVJfU1lTVEVNJwpDTElFTlRfU1VNTUFSWV9RVUVSWSA9ICdTZWxlY3QgUmVzb3VyY2VJRCwgTGFzdEFjdGl2ZVRpbWUgZnJvbSB2X0NIX0NsaWVudFN1bW1hcnknCk9TX0RBVEFfUVVFUlkgPSAnU2VsZWN0IFJlc291cmNlSUQsIExhc3RCb290VXBUaW1lMCBmcm9tIHZfR1NfT1BFUkFUSU5HX1NZU1RFTScKCgpRVUVSWV9TT0ZUV0FSRSA9ICdTZWxlY3QgUmVzb3VyY2VJRCwgUHJvZHVjdE5hbWUwLCBQcm9kdWN0VmVyc2lvbjAgZnJvbSB2X0dTX0lOU1RBTExFRF9TT0ZUV0FSRScKUVVFUllfUEFUQ0ggPSAnU2VsZWN0IFJlc291cmNlSUQsIERlc2NyaXB0aW9uMCwgRml4Q29tbWVudHMwLCBJbnN0YWxsRGF0ZTAsIEhvdEZpeElEMCBmcm9tIHZfR1NfUVVJQ0tfRklYX0VOR0lORUVSSU5HJwpRVUVSWV9QQVRDSF8yID0gJ1NlbGVjdCBSZXNvdXJjZUlELCBEZXNjcmlwdGlvbjAsIEZpeENvbW1lbnRzMCwgSW5zdGFsbERhdGUwLCBIb3RGaXhJRDAgZnJvbSB2X0hTX1FVSUNLX0ZJWF9FTkdJTkVFUklORycKUVVFUllfUFJPR1JBTSA9ICdTZWxlY3QgUmVzb3VyY2VJRCwgRGlzcGxheU5hbWUwLCBWZXJzaW9uMCBmcm9tIHZfR1NfQUREX1JFTU9WRV9QUk9HUkFNUycKUVVFUllfUFJPR1JBTV8yID0gJ1NlbGVjdCBSZXNvdXJjZUlELCBEaXNwbGF5TmFtZTAsIFZlcnNpb24wIGZyb20gdl9HU19BRERfUkVNT1ZFX1BST0dSQU1TXzY0JwpCSU9TX1FVRVJZID0gJ1NlbGVjdCBSZXNvdXJjZUlELCBTZXJpYWxOdW1iZXIwLCBNYW51ZmFjdHVyZXIwIGZyb20gdl9HU19QQ19CSU9TJwpVU0VSU19RVUVSWSA9ICdTZWxlY3QgTWFjaGluZVJlc291cmNlSUQsIFVuaXF1ZVVzZXJOYW1lIGZyb20gdl9Vc2VyTWFjaGluZVJlbGF0aW9uJwpVU0VSU19UT1BfUVVFUlkgPSAnU2VsZWN0IFJlc291cmNlSUQsIFRvcENvbnNvbGVVc2VyMCBmcm9tIHZfR1NfU1lTVEVNX0NPTlNPTEVfVVNBR0VfTUFYR1JPVVAnCk1BTFdBUkVfUVVFUlkgPSAnU2VsZWN0IFJlc291cmNlSUQsIEVuZ2luZVZlcnNpb24sIFZlcnNpb24sIExhc3RGdWxsU2NhbkRhdGVUaW1lRW5kLCAnIFwKICAgICAgICAgICAgICAgICdQcm9kdWN0U3RhdHVzLCBMYXN0UXVpY2tTY2FuRGF0ZVRpbWVFbmQsIEVuYWJsZWQgZnJvbSB2X0dTX0FudGltYWx3YXJlSGVhbHRoU3RhdHVzJwpMRU5PVk9fUVVFUlkgPSAnc2VsZWN0IFJlc291cmNlSUQsIFZlcnNpb24wIGZyb20gdl9HU19DT01QVVRFUl9TWVNURU1fUFJPRFVDVCcKQ0hBU0lTX1FVRVJZID0gJ3NlbGVjdCBSZXNvdXJjZUlELCBDaGFzc2lzVHlwZXMwIGZyb20gdl9HU19TWVNURU1fRU5DTE9TVVJFJwpFTkNSWVBUSU9OX1FVRVJZID0gJ3NlbGVjdCBSZXNvdXJjZUlELERyaXZlTGV0dGVyMCxQcm90ZWN0aW9uU3RhdHVzMCBmcm9tIHZfR1NfRU5DUllQVEFCTEVfVk9MVU1FJwpWTV9RVUVSWSA9ICdzZWxlY3QgUmVzb3VyY2VJRCwgJyBcCiAgICAgICAgICAgJ0ROU05hbWUwLCBJUEFkZHJlc3MwLCBTdGF0ZTAsIFZNTmFtZTAsIFBhdGgwLCBUeXBlMCwgVGltZVN0YW1wIGZyb20gVl9HU19WSVJUVUFMX01BQ0hJTkVTJwpPV05FUl9RVUVSWSA9ICdzZWxlY3QgKiBmcm9tIE9XTkVSSU5GT19EQVRBJwpUUE1fUVVFUlkgPSAnc2VsZWN0IFJlc291cmNlSUQsIElzQWN0aXZhdGVkX0luaXRpYWxWYWx1ZTAsIElzRW5hYmxlZF9Jbml0aWFsVmFsdWUwLCBJc093bmVkX0luaXRpYWxWYWx1ZTAgZnJvbSB2X0dTX1RQTScKQ09MTEVDVElPTlNfUVVFUlkgPSAnc2VsZWN0IFJlc291cmNlSUQsIENvbGxlY3Rpb25JRCBmcm9tIHZfRnVsbENvbGxlY3Rpb25NZW1iZXJzaGlwJwpDT0xMRUNUSU9OU19EQVRBX1FVRVJZID0gJ3NlbGVjdCBDb2xsZWN0aW9uSUQsIE5hbWUgZnJvbSB2X0NvbGxlY3Rpb24nCkNPTVBMSUFOQ0VfUVVFUlkgPSAnc2VsZWN0IFJlc291cmNlSUQsIFN0YXR1cyBmcm9tIHZfVXBkYXRlQ29tcGxpYW5jZVN0YXR1cycKTE9DQUxfQURNSU5fUVVFUlkgPSAnc2VsZWN0IFJlc291cmNlSUQsIG5hbWUwICwgYWNjb3VudDAsIGRvbWFpbjAgZnJvbSB2X2dzX2xvY2FsZ3JvdXBtZW1iZXJzMCcKRFJJVkVSU19RVUVSWSA9ICdzZWxlY3QgUmVzb3VyY2VJRCwgTmFtZTAsIERlc2NyaXB0aW9uMCwgRHJpdmVyVmVyc2lvbjAgZnJvbSB2X0dTX1ZJREVPX0NPTlRST0xMRVInClJBTV9RVUVSWSA9ICdzZWxlY3QgUmVzb3VyY2VJRCwgQ2FwYWNpdHkwIGZyb20gdl9HU19QSFlTSUNBTF9NRU1PUlknCk5FVFdPUktfRFJJVkVSU19RVUVSWSA9ICdzZWxlY3QgUmVzb3VyY2VJRCwgRHJpdmVyRGVzYzAsIERyaXZlclZlcnNpb24wICwgUHJvdmlkZXJOYW1lMCwgRHJpdmVyRGF0ZTAgZnJvbSB2X0dTX05FVFdPUktfRFJJVkVSUycKTkVXX1NPRlRXQVJFX1FVRVJZID0gJ3NlbGVjdCBSZXNvdXJjZUlELCBQcm9kdWN0TmFtZSwgUHJvZHVjdFZlcnNpb24gQ29tcGFueU5hbWUgZnJvbSB2X0dTX1NvZnR3YXJlUHJvZHVjdCcK',
    f'{CORTEX}/plugins/static_correlator/engine.py': b'',
}


def main():
    print(f'Updating epo_adapter, sccm_adapter and static_correlator to e3b07d996d5a612417137f405b6f9f8650b5c310')

    # assert current client
    node_id = core_service.CoreService().node_id
    print(f'Current client: {node_id}')

    # 1. Backup original
    try:
        for path_to_update in FILES_TO_UPDATE.keys():
            bak_path = f'{path_to_update}.bak'
            if os.path.exists(bak_path):
                os.unlink(bak_path)

        for path_to_update in FILES_TO_UPDATE.keys():
            os.rename(path_to_update, f'{path_to_update}.bak')
    except Exception:
        pass

    # 2. write new files
    for path_to_update, b64_contents in FILES_TO_UPDATE.items():
        with open(path_to_update, 'wb') as f:
            f.write(base64.b64decode(b64_contents))

    # 3. Restart adapter
    subprocess.check_call('./se.sh re epo',
                          shell=True, cwd=CORTEX)
    subprocess.check_call('./se.sh re sccm',
                          shell=True, cwd=CORTEX)
    subprocess.check_call('./se.sh re static_correlator',
                          shell=True, cwd=CORTEX)
    subprocess.check_call('./se.sh sc &',
                          shell=True, cwd=CORTEX)

    print(f'Done!')
    return 0


if __name__ == '__main__':
    sys.exit(main())
