#!/home/ubuntu/cortex/venv/bin/python

import sys
import subprocess
import base64
import os
import time

from testing.services.plugins import core_service

CORTEX = '/home/ubuntu/cortex'
FILES_TO_UPDATE = {
    f'{CORTEX}/adapters/service_now_adapter/service.py': b'',
    f'{CORTEX}/axonius-libs/src/libs/axonius-py/axonius/clients/service_now/connection.py': b'',
    f'{CORTEX}/axonius-libs/src/libs/axonius-py/axonius/clients/service_now/consts.py': b'VEFCTEVfTkFNRV9LRVkgPSAndGFibGVfbmFtZScKREVWSUNFX1RZUEVfTkFNRV9LRVkgPSAnZGV2aWNlX3R5cGVfbmFtZScKREVWSUNFU19LRVkgPSAnZGV2aWNlcycKVEFCTEVTX0RFVEFJTFMgPSBbe1RBQkxFX05BTUVfS0VZOiAnY21kYl9jaV9jb21wdXRlcicsIERFVklDRV9UWVBFX05BTUVfS0VZOiAnQ29tcHV0ZXInfSwKICAgICAgICAgICAgICAgICAge1RBQkxFX05BTUVfS0VZOiAnY21kYl9jaV92bScsIERFVklDRV9UWVBFX05BTUVfS0VZOiAnVmlydHVhbCBNYWNoaW5lJ30sCiAgICAgICAgICAgICAgICAgIHtUQUJMRV9OQU1FX0tFWTogJ2NtZGJfY2lfdm1faW5zdGFuY2UnLCBERVZJQ0VfVFlQRV9OQU1FX0tFWTogJ1ZDZW50ZXIgVmlydHVhbCBNYWNoaW5lJ30sCiAgICAgICAgICAgICAgICAgIHtUQUJMRV9OQU1FX0tFWTogJ2NtZGJfY2lfcHJpbnRlcicsIERFVklDRV9UWVBFX05BTUVfS0VZOiAnUHJpbnRlcid9LAogICAgICAgICAgICAgICAgICB7VEFCTEVfTkFNRV9LRVk6ICdjbWRiX2NpX25ldGdlYXInLCBERVZJQ0VfVFlQRV9OQU1FX0tFWTogJ05ldHdvcmsgRGV2aWNlJ31dCk5VTUJFUl9PRl9PRkZTRVRTID0gMTAwMDAwCk9GRlNFVF9TSVpFID0gMjAwClVTRVJTX1RBQkxFID0gJ3N5c191c2VyJwpMT0NBVElPTlNfVEFCTEUgPSAnY21uX2xvY2F0aW9uJwpVU0VSX0dST1VQU19UQUJMRSA9ICdzeXNfdXNlcl9ncm91cCcKREVQQVJUTUVOVFNfVEFCTEUgPSAnY21uX2RlcGFydG1lbnQnClVTRVJTX1RBQkxFX0tFWSA9ICd1c2Vyc190YWJsZScKVVNFUlNfVVNFUk5BTUVfS0VZID0gJ3VzZXJzX3VzZXJuYW1lX2tleScKTklDX1RBQkxFX0tFWSA9ICdjbWRiX2NpX25ldHdvcmtfYWRhcHRlcicKREVQQVJUTUVOVF9UQUJMRV9LRVkgPSAnZGVwYXJ0bWVudF90YWJsZScKTE9DQVRJT05fVEFCTEVfS0VZID0gJ2xvY2F0aW9uX3RhYmxlJwpVU0VSX0dST1VQU19UQUJMRV9LRVkgPSAndXNlcl9ncm91cHNfdGFibGUnCkFMTV9BU1NFVF9UQUJMRSA9ICdhbG1faGFyZHdhcmUnCkNPTVBBTllfVEFCTEUgPSAnY29yZV9jb21wYW55JwpJUFNfVEFCTEUgPSAndV9pcF9hZGRyZXNzJwojIHB5bGludDogZGlzYWJsZT1DMDEwMwpJTlNUQUxMX1NUQVRVU19ESUNUID0geycwJzogJ1JldGlyZWQnLAogICAgICAgICAgICAgICAgICAgICAgICcxJzogJ0RlcGxveWVkJywKICAgICAgICAgICAgICAgICAgICAgICAnMTAnOiAnQ29uc3VtZWQnLAogICAgICAgICAgICAgICAgICAgICAgICcyJzogJ09uIE9yZGVyJywKICAgICAgICAgICAgICAgICAgICAgICAnMyc6ICdBdCBEZXBvdCcsCiAgICAgICAgICAgICAgICAgICAgICAgJzYnOiAnSW4gU3RvY2snLAogICAgICAgICAgICAgICAgICAgICAgICc3JzogJ0Rpc3Bvc2VkJywKICAgICAgICAgICAgICAgICAgICAgICAnOCc6ICdNaXNzaW5nJywKICAgICAgICAgICAgICAgICAgICAgICAnOSc6ICdJbiBUcmFuc2l0JywKICAgICAgICAgICAgICAgICAgICAgICAnNDAnOiAnRGVjb21taXNzaW9uZWQnLAogICAgICAgICAgICAgICAgICAgICAgICcxMDAnOiAnQWJzZW50JywKICAgICAgICAgICAgICAgICAgICAgICAnMjAnOiAnSW4gQnVpbGQnLAogICAgICAgICAgICAgICAgICAgICAgICczMCc6ICdJbiBVc2UnLAogICAgICAgICAgICAgICAgICAgICAgICc0JzogJ1BlbmRpbmcgSW5zdGFsbCcsCiAgICAgICAgICAgICAgICAgICAgICAgJzUnOiAnUGVuZGluZyBSZXBhaXInLAogICAgICAgICAgICAgICAgICAgICAgICc1MCc6ICdSZW1vdmVkJywKICAgICAgICAgICAgICAgICAgICAgICAnNjAnOiAnQWJzZW50J30K',
}


def main():
    print(f'Updating Service Now to e3b07d996d5a612417137f405b6f9f8650b5c310')

    # assert current client
    node_id = core_service.CoreService().node_id
    print(f'Current client: {node_id}')

    # 1. Backup original
    try:
        for path_to_update in FILES_TO_UPDATE.keys():
            bak_path = f'{path_to_update}.bak'
            if os.path.exists(bak_path):
                os.unlink(bak_path)

        for path_to_update in FILES_TO_UPDATE.keys():
            os.rename(path_to_update, f'{path_to_update}.bak')
    except Exception:
        pass

    # 2. write new files
    for path_to_update, b64_contents in FILES_TO_UPDATE.items():
        with open(path_to_update, 'wb') as f:
            f.write(base64.b64decode(b64_contents))

    # 3. Restart adapter
    for i in range(5):
        try:
            subprocess.check_call('./se.sh re service_now',
                                  shell=True, cwd=CORTEX)
            print(f'se.sh succeeded on trial {i}')
            break
        except Exception:
            print(f'Failed se.sh re on trial {i}')
            time.sleep(5)

    print(f'Done!')
    return 0


if __name__ == '__main__':
    sys.exit(main())
