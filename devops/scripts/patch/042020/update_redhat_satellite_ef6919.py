#!/home/ubuntu/cortex/venv/bin/python

import sys
import subprocess
import base64
import os
import time

from testing.services.plugins import core_service

CORTEX = '/home/ubuntu/cortex'
FILES_TO_UPDATE = {
    f'{CORTEX}/adapters/redhat_satellite_adapter/connection.py': b'',
    f'{CORTEX}/adapters/redhat_satellite_adapter/consts.py': b'aW1wb3J0IHJlCgpERVZJQ0VfUEVSX1BBR0UgPSAyMDAKTUFYX05VTUJFUl9PRl9ERVZJQ0VTID0gMjAwMDAwMAoKQVRUUl9JTkpFQ1RFRF9GQUNUUyA9ICdzYXRlbGxpdGVfZmFjdHMnCgpWRVJJU09OX0ZJRUxEU19UT19TT0ZUV0FSRV9OQU1FUyA9IHsKICAgICdhdWdlYXN2ZXJzaW9uJzogJ0F1Z2VhcycsCiAgICAnZmFjdGVydmVyc2lvbic6ICdGYWN0ZXInCn0KClJFX0ZJRUxEX05FVF9JTlRFUkZBQ0VfRVhDRVBUX0xPID0gcmUuY29tcGlsZShyJ15uZXRcLmludGVyZmFjZVwuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcicoPyFsbyknICAjIGV4Y3BldCBmb3IgImxvIiBpbnRlcmZhY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHInKD9QPGludGVyZmFjZV9uYW1lPlteLl0rPylcLicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHInKD9QPGludGVyZmFjZV9maWVsZD4uKz8pJCcsIHJlLk1VTFRJTElORSkK',
    f'{CORTEX}/adapters/redhat_satellite_adapter/service.py': b'',
}


def main():
    print(f'Updating Red Hat Satellite to ef69191b1a7f3b990a6a87b811a851bcf48d8a3e')

    # assert current client
    cs = core_service.CoreService()
    print(f'Current client {cs.node_id}')

    # 1. Backup original
    try:
        for path_to_update in FILES_TO_UPDATE.keys():
            bak_path = f'{path_to_update}.bak'
            if os.path.exists(bak_path):
                os.unlink(bak_path)

        for path_to_update in FILES_TO_UPDATE.keys():
            os.rename(path_to_update, f'{path_to_update}.bak')
    except Exception:
        pass

    # 2. write new files
    for path_to_update, b64_contents in FILES_TO_UPDATE.items():
        with open(path_to_update, 'wb') as f:
            f.write(base64.b64decode(b64_contents))

    # 3. Restart adapter
    for i in range(5):
        try:
            subprocess.check_call('./se.sh re redhat_satellite',
                                  shell=True, cwd=CORTEX)
            print(f'se.sh re succeeded on trial {i}')
            break
        except Exception:
            print(f'Failed se.sh re on trial {i}')
            time.sleep(5)

    try:
        subprocess.check_call('./se.sh af redhat_satellite_adapter_0 --nonblock',
                              shell=True, cwd=CORTEX)
        print(f'se.sh af succeeded')
    except Exception:
        print(f'Failed se.sh af')

    print(f'Done!')
    return 0


if __name__ == '__main__':
    sys.exit(main())
