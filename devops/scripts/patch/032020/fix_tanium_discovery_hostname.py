import sys
import subprocess
import base64
import os

from axonius.entities import EntityType
from testing.services.plugins.static_correlator_service import StaticCorrelatorService
from testing.services.plugins.aggregator_service import AggregatorService
from testing.services.adapters.tanium_discover_service import TaniumDiscoverService

PARSING_PY_B64 = b''
TANIUM_SERVICE_PY_B64 = b''

TANIUM_SERVICE_PY_PATH = '/home/ubuntu/cortex/adapters/tanium_discover_adapter/service.py'
PARSING_PY_PATH = '/home/ubuntu/cortex/axonius-libs/src/libs/axonius-py/axonius/utils/parsing.py'


def main():
    print(f'Running Tanium Discover enhancement')

    # 1. Backup original
    try:
        if os.path.exists(TANIUM_SERVICE_PY_PATH + '.bak'):
            os.unlink(TANIUM_SERVICE_PY_PATH + '.bak')
        if os.path.exists(PARSING_PY_PATH + '.bak'):
            os.unlink(PARSING_PY_PATH + '.bak')
        os.rename(TANIUM_SERVICE_PY_PATH, TANIUM_SERVICE_PY_PATH + '.bak')
        os.rename(PARSING_PY_PATH, PARSING_PY_PATH + '.bak')
    except Exception:
        pass

    # 2. write new files
    with open(TANIUM_SERVICE_PY_PATH, 'wb') as f:
        f.write(base64.b64decode(TANIUM_SERVICE_PY_B64))

    with open(PARSING_PY_PATH, 'wb') as f:
        f.write(base64.b64decode(PARSING_PY_B64))

    # 3. Restart adapter + static correlator
    subprocess.check_call('./axonius.sh adapter tanium_discover up --restart --prod',
                          shell=True, cwd='/home/ubuntu/cortex')
    subprocess.check_call('./axonius.sh service static_correlator up --restart --prod',
                          shell=True, cwd='/home/ubuntu/cortex')

    # 4. Check if we have configured tanium discover connections
    try:
        tds = TaniumDiscoverService()
        if not tds.clients():
            print('Done!')
            return 0
    except Exception:
        # Adapter is not up, so no clients in there
        print(f'Done!')
        return

    # 5. Unset tanium discover adapter hostname
    aggregator = AggregatorService()
    # We do have connections. delete the hostname var
    # pylint: disable=protected-access
    devices_db = aggregator._entity_db_map[EntityType.Devices]

    match = {
        'adapters': {
            '$elemMatch': {
                'plugin_name': 'tanium_discover_adapter',
                f'data.hostname': {'$exists': True}
            }
        }
    }

    print(f'Running migration.....')
    i = 0
    # We have to run this loop a couple of times because $unset only unsets the first in an array, and if we have
    # duplicates we need to remove them too
    while devices_db.count(match) > 0:
        i += 1
        devices_db.update_many(
            match,
            {
                '$unset': {f'adapters.$.data.hostname': 1}
            }
        )

        if i == 500:
            # infinite loop protection
            raise ValueError(f'i=500')

    # Call de wet
    print(f'Running DE..')
    sc = StaticCorrelatorService()
    sc.trigger('detect_errors', blocking=False, post_json={
        'should_fix_errors': True
    })

    print(f'Done!')
    return 0


if __name__ == '__main__':
    sys.exit(main())
