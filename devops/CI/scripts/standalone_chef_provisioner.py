#!/usr/bin/env python3

import json
import os
import random
import shlex
import subprocess
import sys
import shutil
from pathlib import Path

from urllib3 import ProxyManager

KEY_BYTES = b'PK\x03\x04\x14\x00\t\x00\x08\x00\x9a[\xb6N\xc9\xc2v\xfc\x12\x05\x00\x00\x8f\x06\x00\x00\x17\x00\x1c\x00axonius-validator-3.pemUT\t\x00\x03t2\xe5\\\xe62\xe5\\ux\x0b\x00\x01\x04\x00\x00\x00\x00\x04\x00\x00\x00\x00VO\xe5t\xcd+\x0f\xf2,\r\x9a\x9fz\xd2\xa60\xe7O\x18\x87\xf0\x95\xf0a\xad\xe8\xe8\xfb\x88\x92\xa9\xb3\xe7\r<\xd2Q\xb1\xbb\xe8\xaeZ\xceIu\xf08\x9f\x05\x97Y\x1d\x93*\xbfp\x8a\t\xae\x8f[o\xe0\x18\x98%\xb9\x7f\xe4\xfbN|\x88[\x99f\xd4u\xa4\xa0\xac\x923\x08\xa9y\x86\x9f\xf3\xf9\xcdsO\xf6a\xbc\x1f\\\x9e\x01\x08%\x92\xb5w\xff\x13\xeb\xf7fu\xbf\xaa\xa9\xf0\xe0\x8eL\xe0z\x87\x8b\xf0gy\xa9g[B\x0c\x88\x8a\xe0\xf8\x83.o\xc7\x8b\xab\xce\x1b\xfd\x9b\xc0\xccI\xf2\x8d\xac\xb9\xce\xa7F8\xa0\x9b6\xd2~\x88\x1a?@\xbe\xe7\xc4ghU\x89\x17\x1f\xb2\x97\xf9\x04\xdf\x0e\xfaB\xcc\xa8\xf5`\xf4\x07\xee\xad\xd3G\xd6\xf6\n\xae\x9f\xceC7Q\xd0\xf1\xe2^\x0e\xf2\xfe\xd4\x17\xd0\xcc\xff]\xb6z\xca\x91\x82\x96\xefg\xd4\xb1\xa4\x80f&\xe0\xdaY\x1d\xea\xb8N\xa2\xddhBNw\xc3j\x81\x1e\xc5\x9d\xf3`>]r\xfb\xef.\xc8`\xdb\xa2K\x12\x81\x12\nNlS\xdaQ\xcc\xbf\x87n9\xc3l\x8cD\x14\xf0D\xf0Z\xa5\x83d\xc8yO\xa6I\r3QZ\x88\x03|E\x1c\x14\xef\xa7\xf0y\x98&\x1b1\xd3\x10P\xe7\x07\xa2n\x96\x00y,\xf8#@\r2qp\xc5\xe42lt\x07V)\xda\\([\x14\xf7c\xfc+\xee\xd8\x995o\x99\xfcV\xcd\x80\x15\x00\xdc\xa7\xd4\xbd7\x9c\x1eE\x99\x1f\xed}QG\xebt5\x88w\xb3\xec\x02\x80\x834nbk>\xfb\'\x16\xb2#\x15\x08\xa7\xfd\xb0h\x0f\xb6\x0f\x87F%av\xee]I:\x12\xd8?+Hvq\xca\xa7\xa1\x19\x14\x04\xc1\x7fz\xdeY\xf1\xc5\xfaf\x90\xf6\x05)\x84\xf61}\xacs\x88\x91\xe8\xd3\x99H\xd1\xc6\xa9\xa5\xff\x90?\xa8q\'>\xa7\xd1\xc2\xcd\x81k\xa3\xef\xb6pa\xed\x16<d\xc1+\x7f\xbd8\x180\xf8\x8b\x18\xa1\x84\x8a\x880\x85\xe7x\xeb>B\x82\xd4\x9d{2\x0eO\xb4 y\xe2\x13\x14&B~\xeciD\x8f\xbcA\xa6\x8b\xbba\xc9"\xf5\xd8~#\xd3"\xea\xaas\xa0)\xbc\xc3\xa1>E\x9c\x1a\xa1\xc1\xc1\xb0<r\x06:\xdb\xc7\xfeA\xac"@!\xf5\x15\x17\x96\xbe:\xc3\x18P\x99\xdd\x1f\xc3\x9aQ\x8c\xb6\\\xf6\x9c\xa2\x9aO\xe8\x89\xa8N\xfaT\xbda\n\x1a\x8b\xa7\xd8\x80\x9cB\x02x\xc0\x86}\x05\xcaT"\x0e\xd97\xdd)\xafX\x1b\xe6\x07\xb0\x16pmA\xee\xfa\xa2U\xeb%h\x81x\x9a\xc2\xa9\xda\xf7\xc5\x81l\x03J\x99\xd5\x12\xc4\xb3!\x9bk\xff\x10\xe2\xfeK\x1d\'=\xe9D\xec\xd9\xa4n^\xf8\xe1\xce\xb9m\xdd\xf2\xe4\xbe\x01\xd8Qc\xcd\xf3\x07\xa3\xad\xf3k\xc9J\x94\xde\xc6\xc4"\x93\xb2xev7\xef\xc6\xfc\xc92$\xdfEf0\x17\x060\x9e\x97\x8e\xd9\x9b@\x1f\xc5_\xe4\x06\rAm\x96\xfc\xf9\xe5\x10q\xa0C.\xed\x8fS?\xa3X\xd7\xeb\x94v\xacV\x13w}\x00\x9d\xdez\x98\xcf\xcf\x1f=\xa8\xd9\xe3i-\xa6\'N4\xea\xc4_\x94\x9c\x92\x95\xc9A)X\xf1\x12\xb4|\xd0\xab\xf9C}4\x94I\x1c\x83$5eG\xb3D\xe5\x157l\xcaC\x99\x11\xf2\x1d\xeb\xbe\xeaGr6r\xd4\x19\xbf\x08\xa6\x99\x1f\xe4\x98E\xf0\x10\x8b)\xf9\x90\x9b\xbd}{\x9f\xafx\x85@\xf0\xb0\x9ck\x0br\xb8\xce\x19z-\xe0Jt\xde\x03;\xce\xba"\x11F\xf8\xd3\xcb}\xc9\xa1*D9+\x18\x9fw\xd6\xd5\xfdIXd\x118\x1fo\xf6U\x03p\x85OQ\xe0jd\xf1\x10\xb8\x81\x1cy(d\x1f\xe7\xf3\x02D\x1f\x14b\x90o\x1en\xef\x1c\xc2\x9d=\xce=\xf4s\xf66\x1b\x88\'p\xc7p\x011n#W\x93\'\xda<\xa0\xd5\x89\xef2\xe8-U\xe7\x03[J\xc5Q\xe9\xf6\x116\xcd\x7fB\x91\xa7\xa6qxC\xec\xb5\xc4\x05\xb9(k\x05\'e\xca:\xd0\xc1(@\n\x8d\xb6G\x17\n9\xdfs\x01\x87!g\xa3\xaaZ`X\x00\x95\xde\xc4\x8e\xf5~\x05\xa7k\xddt\x9f\xdb\xa2}8\x9eB\x1d/7-\xe5\xd3\xf2+l\x9f\xe5P\xb0\xc9\x91U\x99\x93\xdf\xab\'\xbb\xee\x8d\xb8uz\xda\xa1eJh\x05\x02\xd7\xe8\x19M\x15s)\x13\xc85x\xcc\xdf\x04\xf5\x7f\x00\xcdW>8\x96\x7f\x85\xccA\xf4X\xd9\x94\x81:]\xb5~Ae`\xbe\x1e\x0c\xbecA\x0b\x8a\x8c\xb6\xc2\xef\xa0\xfa\x84\xee\x1e9za\x89R\xee~\xa0;[F\xb6\xe6\xd5=$\x82bH\xc3\xd9RN\xdb\xb7n\xa3O\xbf\x1b-H\xe5I\xbc\x81\x0c\x8e\x8f\x96c\x93\xc9\xdd\xfe\x89a\x91\xde\xff\x92nih\x11\xe7r\x19\xc8\xd8\xef\x1bA\xd3\x02\xb5\x02\xbb\xa7&\xcfZ4\x13\x00{l\xc4fT\xd3\xd8a\xb4\xfc\x02\x0f\xda\x0b\x13-\x19\xcf`&\x02Y\xc8\x92\x90Z\xc2I&ra\x99\xcb\xb5\xf3`L=_\x03Xl\xef\xb7W\x03\xf1Z&ALQ\xfe\xfd\xf6g\xe0\xb5\xc8I$J\xb9\xd3\x17I\x94\x05\x8a\xdf\x13o\xd0!\xb1u=\x82\xdc@\xdd\xeas\x06(\x04\xa5\x87\x7f\xac\x01\xe5c\\\xf5kB\t\x93\xdb\xc0A>E\x11r[f\xe7\xc4\\\xb5\xd4\xac\x19fx4\xa3PK\x07\x08\xc9\xc2v\xfc\x12\x05\x00\x00\x8f\x06\x00\x00PK\x01\x02\x1e\x03\x14\x00\t\x00\x08\x00\x9a[\xb6N\xc9\xc2v\xfc\x12\x05\x00\x00\x8f\x06\x00\x00\x17\x00\x18\x00\x00\x00\x00\x00\x01\x00\x00\x00\xa4\x81\x00\x00\x00\x00axonius-validator-3.pemUT\x05\x00\x03t2\xe5\\ux\x0b\x00\x01\x04\x00\x00\x00\x00\x04\x00\x00\x00\x00PK\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00]\x00\x00\x00s\x05\x00\x00\x00\x00'

if os.geteuid() != 0:
    print('This script should run as root')
    sys.exit(-1)


def chech_command_status(cmd, **kwargs):
    return run_command(cmd, **kwargs).returncode


def run_command(cmd, **kwargs):
    return subprocess.run(shlex.split(cmd), **kwargs)


def read_proxy_data():
    try:
        proxy_data = run_command('docker exec core cat /tmp/proxy_data.txt', stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE).stdout.decode().strip()
        try:
            as_dict = json.loads(proxy_data)
            proxy_creds = as_dict['creds']
        except Exception as e:
            # backward compatibility, when the file was a single proxy_line
            proxy_creds = proxy_data
            as_dict = {'creds': proxy_data, 'verify': True}

        print(f'Got proxy line={proxy_creds}')
        # invoking this one only to validate that the proxy string format is a valid proxy string
        ProxyManager(f'http://{proxy_creds}')
        return as_dict
    except Exception as e:
        print(f'Failed to process proxy line {e}')
        return None


def provision():
    print('starting provision sequence')
    node_name = 'node-3-' + ''.join(random.choices('abcdefghijklmnopqrstuvwxyz0123456789', k=8))

    shutil.rmtree('/etc/chef')
    Path('/etc/chef').mkdir(mode=0o750)
    client_rb = Path('/etc/chef/client.rb')

    client_rb_template = [f'chef_server_url  "https://manage.chef.io/organizations/axonius"',
                          f'node_name  "{node_name}"',
                          f'validation_key "/home/ubuntu/axonius-validator-3.pem"',
                          f'validation_client_name "axonius-validator-3"',
                          f'automatic_attribute_blacklist [["filesystem", "by_mountpoint"], ["filesystem", "by_pair"]]']

    proxy_data = read_proxy_data()
    proxy_line = proxy_data['creds']
    if proxy_line:
        http_proxy = f'http://{proxy_line}'
        https_proxy = f'https://{proxy_line}'
        client_rb_template.append(f'http_proxy "{http_proxy}"')
        client_rb_template.append(f'https_proxy "{https_proxy}"')

        if proxy_data['verify'] is False:
            client_rb_template.append(f'ssl_verify_mode :verify_none')

    client_rb.write_text('\n'.join(client_rb_template))

    first_boot = '''
    {
         "chef_environment": "prod",
         "run_list" :[
         "role[provision]",
         "role[after_provision]"
         ]
    }
    '''
    Path('/etc/chef/first-boot.json').write_text(first_boot)

    run_command('/usr/bin/chef-client -j /etc/chef/first-boot.json')
    run_command('/usr/sbin/service chef-client restart')


def run(cmd, **kwargs):
    print(f'[+] running {cmd}')
    return subprocess.check_call(shlex.split(cmd), **kwargs)


def main():
    prepare()
    provision()
    return 0


def prepare():
    key_password = sys.argv[1]

    print('Installing chef')
    run('/bin/mkdir -p /etc/chef')
    run('/bin/mkdir -p /var/lib/chef')
    run('/bin/mkdir -p /var/log/chef')
    install_sh = subprocess.Popen(shlex.split('curl -L https://omnitruck.chef.io/install.sh'), stdout=subprocess.PIPE)
    run('sudo bash -s -- -v 14.1.12', stdin=install_sh.stdout)
    install_sh.wait()
    print('Installing chef done')

    run('sudo apt-get install -y unzip')

    pem_zip = Path('/home/ubuntu/key.zip')

    try:
        pem_zip.write_bytes(KEY_BYTES)
        run(f'unzip -o -P {key_password} {pem_zip} -d ' + '/home/ubuntu/')
        pem_zip.unlink()
    finally:
        if pem_zip.is_file():
            pem_zip.unlink()


if __name__ == '__main__':
    sys.exit(main())
