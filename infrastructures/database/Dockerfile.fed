FROM ubuntu:bionic AS builder

RUN groupadd -r mongodb && useradd -r -g mongodb mongodb

RUN apt-get update && \
	apt-get install -y libcurl4-openssl-dev build-essential curl vim git python3 python3-pip gcc-8 g++-8 libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-thread-dev

RUN python3 -m pip install --upgrade pip
RUN cd /tmp && mkdir temp_openssl && \
	cd temp_openssl && curl -O https://www.openssl.org/source/openssl-fips-2.0.16.tar.gz && \
		tar xf openssl-fips-2.0.16.tar.gz && \
		cd openssl-fips-2.0.16 && \
		./config && \
		make && \
		make install

RUN cd /tmp/temp_openssl && curl -O https://www.openssl.org/source/old/1.0.2/openssl-1.0.2u.tar.gz && \
    tar xf openssl-1.0.2u.tar.gz && \
    cd openssl-1.0.2u && \
    ./config shared fips --with-fipslibdir=/usr/local/ssl/fips-2.0/lib/ && \
    make depend && \
    make && \
    make install

RUN echo "/usr/local/ssl/lib" > /etc/ld.so.conf.d/openssl.conf && \
		ldconfig && \
		mv /usr/bin/openssl /usr/bin/openssl.old && \
		ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl && \
		ln -s /etc/ssl/certs/*.* /usr/local/ssl/certs/

RUN rm -rf /tmp/temp_openssl && ldconfig

RUN cd /tmp/ && git clone https://github.com/mongodb/mongo.git && cd mongo && \
	git checkout r4.2.8 && \
	python3 -m pip install -r etc/pip/compile-requirements.txt
RUN apt-get purge -y gcc-7 g++-7 && \
	ln -s /usr/bin/gcc-8 /usr/bin/gcc && \
	ln -s /usr/bin/g++-8 /usr/bin/g++
RUN cd /tmp/mongo && \
	python3 buildscripts/scons.py --ssl CPPPATH=/usr/local/ssl/include LIBPATH=/usr/local/ssl/lib -j 16 all

RUN strip -s /tmp/mongo/build/opt/mongo/mongod && \
    strip -s /tmp/mongo/build/opt/mongo/mongos && \
    strip -s /tmp/mongo/build/opt/mongo/mongo

###############################################################################################################
# Mostly taken from https://github.com/docker-library/mongo/blob/master/4.2/Dockerfile
FROM ubuntu:bionic AS runner

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN groupadd -r mongodb && useradd -r -g mongodb mongodb

RUN set -eux; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		ca-certificates \
		jq \
		numactl \
		curl \
		build-essential \
	; \
	if ! command -v ps > /dev/null; then \
		apt-get install -y --no-install-recommends procps; \
	fi; \
	rm -rf /var/lib/apt/lists/*

# grab gosu for easy step-down from root (https://github.com/tianon/gosu/releases)
ENV GOSU_VERSION 1.12
# grab "js-yaml" for parsing mongod's YAML config files (https://github.com/nodeca/js-yaml/releases)
ENV JSYAML_VERSION 3.13.1

RUN set -ex; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		wget \
	; \
	if ! command -v gpg > /dev/null; then \
		apt-get install -y --no-install-recommends gnupg dirmngr; \
		savedAptMark="$savedAptMark gnupg dirmngr"; \
	elif gpg --version | grep -q '^gpg (GnuPG) 1\.'; then \
# "This package provides support for HKPS keyservers." (GnuPG 1.x only)
		apt-get install -y --no-install-recommends gnupg-curl; \
	fi; \
	rm -rf /var/lib/apt/lists/*; \
	\
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	command -v gpgconf && gpgconf --kill all || :; \
	rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	\
	wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js"; \
# TODO some sort of download verification here
	\
	apt-mark auto '.*' > /dev/null; \
	apt-mark manual $savedAptMark > /dev/null; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
# smoke test
	chmod +x /usr/local/bin/gosu; \
	gosu --version; \
	gosu nobody true


RUN mkdir temp_openssl
# Build Fips object module
RUN cd temp_openssl && curl -O https://www.openssl.org/source/openssl-fips-2.0.16.tar.gz && \
    tar xf openssl-fips-2.0.16.tar.gz && \
    cd openssl-fips-2.0.16 && \
    ./config && \
    make && \
    make install

# Build OpenSSL with FIPS
RUN cd temp_openssl && curl -O https://www.openssl.org/source/old/1.0.2/openssl-1.0.2u.tar.gz && \
    tar xf openssl-1.0.2u.tar.gz && \
    cd openssl-1.0.2u && \
    ./config shared fips --with-fipslibdir=/usr/local/ssl/fips-2.0/lib/ && \
    make depend && \
    make && \
    make install

RUN echo "/usr/local/ssl/lib" > /etc/ld.so.conf.d/openssl.conf && \
    ldconfig && \
    mv /usr/bin/openssl /usr/bin/openssl.old && \
    ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl && \
    ln -s /etc/ssl/certs/*.* /usr/local/ssl/certs/

RUN rm -f /etc/ld.so.cache && ldconfig

RUN rm -rf temp_openssl

RUN mkdir /docker-entrypoint-initdb.d

# Allow build-time overrides (eg. to build image with MongoDB Enterprise version)
# Options for MONGO_PACKAGE: mongodb-org OR mongodb-enterprise
# Options for MONGO_REPO: repo.mongodb.org OR repo.mongodb.com
# Example: docker build --build-arg MONGO_PACKAGE=mongodb-enterprise --build-arg MONGO_REPO=repo.mongodb.com .
ARG MONGO_PACKAGE=mongodb-org
ARG MONGO_REPO=repo.mongodb.org
ENV MONGO_PACKAGE=${MONGO_PACKAGE} MONGO_REPO=${MONGO_REPO}

ENV MONGO_MAJOR 4.2
ENV MONGO_VERSION 4.2.8
# bashbrew-architectures:amd64 arm64v8 s390x
RUN echo "deb [ allow-insecure=yes ] http://$MONGO_REPO/apt/ubuntu bionic/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"

RUN set -x \
# installing "mongodb-enterprise" pulls in "tzdata" which prompts for input
	&& export DEBIAN_FRONTEND=noninteractive \
	&& apt-get --allow-unauthenticated update \
	&& apt-get --allow-unauthenticated install -y \
		${MONGO_PACKAGE}=$MONGO_VERSION \
		${MONGO_PACKAGE}-server=$MONGO_VERSION \
		${MONGO_PACKAGE}-shell=$MONGO_VERSION \
		${MONGO_PACKAGE}-mongos=$MONGO_VERSION \
		${MONGO_PACKAGE}-tools=$MONGO_VERSION \
	&& rm -rf /var/lib/apt/lists/* \
	&& rm -rf /var/lib/mongodb \
	&& mv /etc/mongod.conf /etc/mongod.conf.orig

RUN mkdir -p /data/db /data/configdb \
	&& chown -R mongodb:mongodb /data/db /data/configdb
VOLUME /data/db /data/configdb

COPY --from=builder /tmp/mongo/build/opt/mongo/mongod /usr/bin/mongod
COPY --from=builder /tmp/mongo/build/opt/mongo/mongos /usr/bin/mongos
COPY --from=builder /tmp/mongo/build/opt/mongo/mongo /usr/bin/mongo

COPY docker-entrypoint.sh /usr/local/bin/
ENTRYPOINT ["docker-entrypoint.sh"]
